name: Environment Configuration

on:
  push:
    paths:
      - "config/**"
      - "infra/**"
  pull_request:
    paths:
      - "config/**"
      - "infra/**"
  workflow_dispatch:
    inputs:
      environment:
        description: Environment to validate (leave blank to validate all)
        required: false
        default: ""

permissions:
  contents: read

env:
  PYTHON_VERSION: "3.11"

jobs:
  validate-config:
    name: Validate configuration files
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        id: setup-python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: poetry
          cache-dependency-path: pyproject.toml

      - name: Install Poetry
        run: |
          python -m pip install --upgrade pip
          pip install poetry

      - name: Configure Poetry environment
        run: poetry env use "${{ steps.setup-python.outputs.python-path }}"

      - name: Install dependencies
        run: poetry install --only main --no-interaction --no-root

      - name: Validate config via ConfigLoader
        env:
          TARGET_ENV: ${{ github.event.inputs.environment }}
        run: |
          poetry run python - <<'PY'
          import os
          import pathlib

          from infra.utils.config_backends import LocalYamlBackend
          from infra.utils.config_loader import ConfigLoader

          repo_root = pathlib.Path.cwd()
          config_dir = repo_root / 'config'

          requested = (os.environ.get('TARGET_ENV') or '').strip()
          environments = [requested] if requested else ['dev', 'staging', 'prod']

          errors: list[str] = []

          for env_name in environments:
            backend = LocalYamlBackend(str(config_dir))
            try:
              ConfigLoader(env=env_name, strict=True, backend=backend)
            except Exception as exc:  # pragma: no cover - CI validation guardrail
              errors.append(f"{env_name}: {exc}")

          if errors:
            print('Configuration validation failed:')
            for message in errors:
              print(f'  - {message}')
            raise SystemExit(1)

          print('Configuration validation succeeded for environments:', ', '.join(environments))
          PY
