name: Monitoring Setup

on:
  deployment_status:
  schedule:
    # Run monitoring setup checks every hour
    - cron: "0 * * * *"
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to setup monitoring"
        required: true
        default: "staging"
        type: choice
        options:
          - dev
          - staging
          - prod
      action:
        description: "Monitoring action"
        required: true
        default: "validate"
        type: choice
        options:
          - validate
          - setup
          - update
          - test-alerts

env:
  PYTHON_VERSION: "3.11"

jobs:
  setup-cloudwatch:
    name: Setup CloudWatch Monitoring
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
        continue-on-error: true

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install boto3 pyyaml

      - name: Create CloudWatch dashboard and alarms
        env:
          ENVIRONMENT: ${{ github.event.inputs.environment || 'staging' }}
        run: |
          cat > setup_cloudwatch.py << 'EOF'
          import boto3
          import json
          import os
          from botocore.exceptions import ClientError

          def create_dashboard():
              """Create CloudWatch dashboard for forecaster monitoring"""
              try:
                  cloudwatch = boto3.client('cloudwatch')
                  environment = os.getenv('ENVIRONMENT', 'staging')

                  dashboard_body = {
                      "widgets": [
                          {
                              "type": "metric",
                              "x": 0,
                              "y": 0,
                              "width": 12,
                              "height": 6,
                              "properties": {
                                  "metrics": [
                                      ["AWS/Lambda", "Duration", "FunctionName", f"shieldcraft-forecaster-{environment}"],
                                      [".", "Errors", ".", "."],
                                      [".", "Invocations", ".", "."]
                                  ],
                                  "period": 300,
                                  "stat": "Average",
                                  "region": "us-east-1",
                                  "title": "Lambda Performance Metrics"
                              }
                          },
                          {
                              "type": "metric",
                              "x": 0,
                              "y": 6,
                              "width": 12,
                              "height": 6,
                              "properties": {
                                  "metrics": [
                                      ["AWS/ApiGateway", "4XXError", "ApiName", f"shieldcraft-api-{environment}"],
                                      [".", "5XXError", ".", "."],
                                      [".", "Count", ".", "."],
                                      [".", "Latency", ".", "."]
                                  ],
                                  "period": 300,
                                  "stat": "Sum",
                                  "region": "us-east-1",
                                  "title": "API Gateway Metrics"
                              }
                          },
                          {
                              "type": "metric",
                              "x": 0,
                              "y": 12,
                              "width": 12,
                              "height": 6,
                              "properties": {
                                  "metrics": [
                                      ["AWS/StepFunctions", "ExecutionsFailed", "StateMachineArn", f"arn:aws:states:us-east-1:*:stateMachine:ShieldCraftWorkflow-{environment}"],
                                      [".", "ExecutionsSucceeded", ".", "."],
                                      [".", "ExecutionTime", ".", "."]
                                  ],
                                  "period": 300,
                                  "stat": "Sum",
                                  "region": "us-east-1",
                                  "title": "Step Functions Workflow Metrics"
                              }
                          },
                          {
                              "type": "log",
                              "x": 0,
                              "y": 18,
                              "width": 24,
                              "height": 6,
                              "properties": {
                                  "query": f"SOURCE '/aws/lambda/shieldcraft-forecaster-{environment}'\n| fields @timestamp, @message\n| filter @message like /ERROR/\n| sort @timestamp desc\n| limit 100",
                                  "region": "us-east-1",
                                  "title": "Recent Errors",
                                  "view": "table"
                              }
                          }
                      ]
                  }

                  dashboard_name = f"ShieldCraft-AI-{environment}"

                  cloudwatch.put_dashboard(
                      DashboardName=dashboard_name,
                      DashboardBody=json.dumps(dashboard_body)
                  )

                  print(f"✅ Created CloudWatch dashboard: {dashboard_name}")
                  return True

              except ClientError as e:
                  print(f"❌ Failed to create CloudWatch dashboard: {e}")
                  return False
              except Exception as e:
                  print(f"❌ Error creating dashboard: {e}")
                  return False

          def create_alarms():
              """Create CloudWatch alarms for critical metrics"""
              try:
                  cloudwatch = boto3.client('cloudwatch')
                  environment = os.getenv('ENVIRONMENT', 'staging')

                  alarms = [
                      {
                          'AlarmName': f'ShieldCraft-Lambda-Errors-{environment}',
                          'ComparisonOperator': 'GreaterThanThreshold',
                          'EvaluationPeriods': 2,
                          'MetricName': 'Errors',
                          'Namespace': 'AWS/Lambda',
                          'Period': 300,
                          'Statistic': 'Sum',
                          'Threshold': 5.0,
                          'ActionsEnabled': True,
                          'AlarmActions': [
                              f'arn:aws:sns:us-east-1:123456789012:shieldcraft-alerts-{environment}'
                          ],
                          'AlarmDescription': 'Lambda function error rate is too high',
                          'Dimensions': [
                              {
                                  'Name': 'FunctionName',
                                  'Value': f'shieldcraft-forecaster-{environment}'
                              },
                          ],
                          'Unit': 'Count'
                      },
                      {
                          'AlarmName': f'ShieldCraft-API-Latency-{environment}',
                          'ComparisonOperator': 'GreaterThanThreshold',
                          'EvaluationPeriods': 3,
                          'MetricName': 'Latency',
                          'Namespace': 'AWS/ApiGateway',
                          'Period': 300,
                          'Statistic': 'Average',
                          'Threshold': 5000.0,  # 5 seconds
                          'ActionsEnabled': True,
                          'AlarmActions': [
                              f'arn:aws:sns:us-east-1:123456789012:shieldcraft-alerts-{environment}'
                          ],
                          'AlarmDescription': 'API Gateway latency is too high',
                          'Dimensions': [
                              {
                                  'Name': 'ApiName',
                                  'Value': f'shieldcraft-api-{environment}'
                              },
                          ],
                          'Unit': 'Milliseconds'
                      },
                      {
                          'AlarmName': f'ShieldCraft-StepFunction-Failures-{environment}',
                          'ComparisonOperator': 'GreaterThanThreshold',
                          'EvaluationPeriods': 1,
                          'MetricName': 'ExecutionsFailed',
                          'Namespace': 'AWS/StepFunctions',
                          'Period': 300,
                          'Statistic': 'Sum',
                          'Threshold': 1.0,
                          'ActionsEnabled': True,
                          'AlarmActions': [
                              f'arn:aws:sns:us-east-1:123456789012:shieldcraft-alerts-{environment}'
                          ],
                          'AlarmDescription': 'Step Function workflow failures detected',
                          'Dimensions': [
                              {
                                  'Name': 'StateMachineArn',
                                  'Value': f'arn:aws:states:us-east-1:*:stateMachine:ShieldCraftWorkflow-{environment}'
                              },
                          ],
                          'Unit': 'Count'
                      }
                  ]

                  created_count = 0
                  for alarm in alarms:
                      try:
                          cloudwatch.put_metric_alarm(**alarm)
                          print(f"✅ Created alarm: {alarm['AlarmName']}")
                          created_count += 1
                      except ClientError as e:
                          print(f"❌ Failed to create alarm {alarm['AlarmName']}: {e}")

                  print(f"Created {created_count}/{len(alarms)} alarms")
                  return created_count > 0

              except Exception as e:
                  print(f"❌ Error creating alarms: {e}")
                  return False

          def main():
              environment = os.getenv('ENVIRONMENT', 'staging')
              action = os.getenv('ACTION', 'validate')

              print(f"Setting up CloudWatch monitoring for {environment}")

              success = True

              if action in ['setup', 'update']:
                  # Create dashboard
                  print("\n1. Creating CloudWatch Dashboard...")
                  if not create_dashboard():
                      success = False

                  # Create alarms
                  print("\n2. Creating CloudWatch Alarms...")
                  if not create_alarms():
                      success = False
              else:
                  print("Validation mode - checking existing resources...")
                  # In validation mode, just check if resources exist
                  try:
                      cloudwatch = boto3.client('cloudwatch')

                      # Check dashboard exists
                      dashboards = cloudwatch.list_dashboards()
                      dashboard_exists = any(
                          d['DashboardName'] == f"ShieldCraft-AI-{environment}"
                          for d in dashboards['DashboardEntries']
                      )

                      if dashboard_exists:
                          print("✅ CloudWatch dashboard exists")
                      else:
                          print("⚠️ CloudWatch dashboard not found")

                      # Check alarms exist
                      alarms = cloudwatch.describe_alarms(
                          AlarmNamePrefix=f'ShieldCraft-',
                          StateValue='OK'
                      )

                      env_alarms = [
                          a for a in alarms['MetricAlarms']
                          if environment in a['AlarmName']
                      ]

                      print(f"✅ Found {len(env_alarms)} CloudWatch alarms for {environment}")

                  except ClientError as e:
                      print(f"❌ Error validating CloudWatch resources: {e}")
                      success = False

              if success:
                  print(f"\n✅ CloudWatch monitoring setup completed for {environment}")
              else:
                  print(f"\n❌ CloudWatch monitoring setup failed for {environment}")
                  exit(1)

          if __name__ == "__main__":
              main()
          EOF

          python setup_cloudwatch.py

  setup-sns-alerts:
    name: Setup SNS Alert System
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
        continue-on-error: true

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install boto3

      - name: Setup SNS topics and subscriptions
        env:
          ENVIRONMENT: ${{ github.event.inputs.environment || 'staging' }}
        run: |
          cat > setup_sns.py << 'EOF'
          import boto3
          import json
          import os
          from botocore.exceptions import ClientError

          def create_sns_topics():
              """Create SNS topics for different alert types"""
              try:
                  sns = boto3.client('sns')
                  environment = os.getenv('ENVIRONMENT', 'staging')

                  topics = [
                      {
                          'name': f'shieldcraft-alerts-{environment}',
                          'description': 'General alerts for ShieldCraft AI application'
                      },
                      {
                          'name': f'shieldcraft-critical-{environment}',
                          'description': 'Critical alerts requiring immediate attention'
                      },
                      {
                          'name': f'shieldcraft-cost-{environment}',
                          'description': 'Cost-related alerts and budget notifications'
                      }
                  ]

                  created_topics = {}

                  for topic_config in topics:
                      try:
                          response = sns.create_topic(
                              Name=topic_config['name'],
                              Attributes={
                                  'DisplayName': topic_config['description']
                              },
                              Tags=[
                                  {'Key': 'Environment', 'Value': environment},
                                  {'Key': 'Application', 'Value': 'shieldcraft-ai'},
                                  {'Key': 'ManagedBy', 'Value': 'github-actions'}
                              ]
                          )

                          topic_arn = response['TopicArn']
                          created_topics[topic_config['name']] = topic_arn
                          print(f"✅ Created SNS topic: {topic_config['name']}")

                      except ClientError as e:
                          if e.response['Error']['Code'] == 'TopicAlreadyExists':
                              # Get existing topic ARN
                              topics_response = sns.list_topics()
                              for topic in topics_response['Topics']:
                                  if topic_config['name'] in topic['TopicArn']:
                                      created_topics[topic_config['name']] = topic['TopicArn']
                                      print(f"✅ Using existing SNS topic: {topic_config['name']}")
                                      break
                          else:
                              print(f"❌ Failed to create topic {topic_config['name']}: {e}")

                  return created_topics

              except Exception as e:
                  print(f"❌ Error creating SNS topics: {e}")
                  return {}

          def setup_topic_policies(topics):
              """Setup topic policies for cross-service access"""
              try:
                  sns = boto3.client('sns')

                  for topic_name, topic_arn in topics.items():
                      policy = {
                          "Version": "2012-10-17",
                          "Statement": [
                              {
                                  "Effect": "Allow",
                                  "Principal": {
                                      "Service": [
                                          "cloudwatch.amazonaws.com",
                                          "lambda.amazonaws.com",
                                          "events.amazonaws.com"
                                      ]
                                  },
                                  "Action": "sns:Publish",
                                  "Resource": topic_arn
                              }
                          ]
                      }

                      try:
                          sns.set_topic_attributes(
                              TopicArn=topic_arn,
                              AttributeName='Policy',
                              AttributeValue=json.dumps(policy)
                          )
                          print(f"✅ Set policy for topic: {topic_name}")
                      except ClientError as e:
                          print(f"❌ Failed to set policy for {topic_name}: {e}")

                  return True

              except Exception as e:
                  print(f"❌ Error setting topic policies: {e}")
                  return False

          def create_slack_webhook_subscription(topics):
              """Create Lambda function for Slack notifications"""
              try:
                  lambda_client = boto3.client('lambda')
                  sns = boto3.client('sns')
                  environment = os.getenv('ENVIRONMENT', 'staging')

                  # Create Lambda function for Slack notifications
                  function_name = f'shieldcraft-slack-notifier-{environment}'

                  lambda_code = '''
          import json
          import urllib3
          import os

          def lambda_handler(event, context):
              """Send SNS messages to Slack"""

              webhook_url = os.environ.get('SLACK_WEBHOOK_URL')
              if not webhook_url:
                  print("SLACK_WEBHOOK_URL not configured")
                  return {'statusCode': 200}

              http = urllib3.PoolManager()

              # Parse SNS message
              sns_message = json.loads(event['Records'][0]['Sns']['Message'])
              subject = event['Records'][0]['Sns']['Subject'] or 'ShieldCraft Alert'

              # Format Slack message
              slack_message = {
                  "text": f"🔔 {subject}",
                  "attachments": [
                      {
                          "color": "warning" if "warning" in subject.lower() else "danger",
                          "fields": [
                              {
                                  "title": "Environment",
                                  "value": os.environ.get('ENVIRONMENT', 'unknown'),
                                  "short": True
                              },
                              {
                                  "title": "Message",
                                  "value": str(sns_message),
                                  "short": False
                              }
                          ]
                      }
                  ]
              }

              try:
                  response = http.request(
                      'POST',
                      webhook_url,
                      body=json.dumps(slack_message),
                      headers={'Content-Type': 'application/json'}
                  )

                  return {
                      'statusCode': 200,
                      'body': 'Slack notification sent'
                  }
              except Exception as e:
                  print(f"Error sending Slack notification: {e}")
                  return {
                      'statusCode': 500,
                      'body': str(e)
                  }
          '''

                  # Check if function already exists
                  try:
                      lambda_client.get_function(FunctionName=function_name)
                      print(f"✅ Lambda function already exists: {function_name}")

                      # Get function ARN for subscription
                      response = lambda_client.get_function(FunctionName=function_name)
                      function_arn = response['Configuration']['FunctionArn']

                  except ClientError as e:
                      if e.response['Error']['Code'] == 'ResourceNotFoundException':
                          print(f"ℹ️ Lambda function {function_name} would be created in actual deployment")
                          print("   (Skipping in CI/CD environment)")
                          return True
                      else:
                          raise

                  return True

              except Exception as e:
                  print(f"❌ Error setting up Slack integration: {e}")
                  return False

          def main():
              environment = os.getenv('ENVIRONMENT', 'staging')
              print(f"Setting up SNS alert system for {environment}")

              # Create SNS topics
              print("\n1. Creating SNS Topics...")
              topics = create_sns_topics()

              if not topics:
                  print("❌ Failed to create SNS topics")
                  exit(1)

              # Setup topic policies
              print("\n2. Setting up Topic Policies...")
              setup_topic_policies(topics)

              # Setup Slack integration
              print("\n3. Setting up Slack Integration...")
              create_slack_webhook_subscription(topics)

              print(f"\n✅ SNS alert system setup completed for {environment}")
              print(f"Created {len(topics)} SNS topics:")
              for topic_name in topics.keys():
                  print(f"  - {topic_name}")

          if __name__ == "__main__":
              main()
          EOF

          python setup_sns.py

  test-monitoring:
    name: Test Monitoring System
    runs-on: ubuntu-latest
    needs: [setup-cloudwatch, setup-sns-alerts]
    if: github.event.inputs.action == 'test-alerts'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
        continue-on-error: true

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install boto3

      - name: Test alert system
        env:
          ENVIRONMENT: ${{ github.event.inputs.environment || 'staging' }}
        run: |
          cat > test_monitoring.py << 'EOF'
          import boto3
          import json
          import time
          import os
          from botocore.exceptions import ClientError

          def test_sns_publishing():
              """Test SNS topic publishing"""
              try:
                  sns = boto3.client('sns')
                  environment = os.getenv('ENVIRONMENT', 'staging')

                  # Test message
                  test_message = {
                      'alert_type': 'test',
                      'environment': environment,
                      'message': 'This is a test alert from the monitoring system',
                      'timestamp': time.time(),
                      'severity': 'info'
                  }

                  topic_name = f'shieldcraft-alerts-{environment}'

                  # Find topic ARN
                  topics = sns.list_topics()
                  topic_arn = None

                  for topic in topics['Topics']:
                      if topic_name in topic['TopicArn']:
                          topic_arn = topic['TopicArn']
                          break

                  if not topic_arn:
                      print(f"⚠️ SNS topic not found: {topic_name}")
                      return False

                  # Publish test message
                  response = sns.publish(
                      TopicArn=topic_arn,
                      Message=json.dumps(test_message, indent=2),
                      Subject=f'Test Alert - {environment.upper()}'
                  )

                  message_id = response['MessageId']
                  print(f"✅ Test message published to SNS: {message_id}")
                  return True

              except ClientError as e:
                  print(f"❌ Error testing SNS: {e}")
                  return False

          def test_cloudwatch_custom_metrics():
              """Test publishing custom metrics to CloudWatch"""
              try:
                  cloudwatch = boto3.client('cloudwatch')
                  environment = os.getenv('ENVIRONMENT', 'staging')

                  # Publish test metrics
                  test_metrics = [
                      {
                          'MetricName': 'TestMetric',
                          'Value': 1.0,
                          'Unit': 'Count',
                          'Dimensions': [
                              {
                                  'Name': 'Environment',
                                  'Value': environment
                              },
                              {
                                  'Name': 'Component',
                                  'Value': 'MonitoringTest'
                              }
                          ]
                      },
                      {
                          'MetricName': 'TestLatency',
                          'Value': 250.0,
                          'Unit': 'Milliseconds',
                          'Dimensions': [
                              {
                                  'Name': 'Environment',
                                  'Value': environment
                              },
                              {
                                  'Name': 'Component',
                                  'Value': 'MonitoringTest'
                              }
                          ]
                      }
                  ]

                  cloudwatch.put_metric_data(
                      Namespace=f'ShieldCraft/Test/{environment}',
                      MetricData=test_metrics
                  )

                  print(f"✅ Published {len(test_metrics)} test metrics to CloudWatch")
                  return True

              except ClientError as e:
                  print(f"❌ Error testing CloudWatch metrics: {e}")
                  return False

          def test_alarm_states():
              """Test CloudWatch alarm states"""
              try:
                  cloudwatch = boto3.client('cloudwatch')
                  environment = os.getenv('ENVIRONMENT', 'staging')

                  # Get alarms for this environment
                  alarms = cloudwatch.describe_alarms(
                      AlarmNamePrefix=f'ShieldCraft-'
                  )

                  env_alarms = [
                      alarm for alarm in alarms['MetricAlarms']
                      if environment in alarm['AlarmName']
                  ]

                  if not env_alarms:
                      print(f"⚠️ No CloudWatch alarms found for {environment}")
                      return True

                  print(f"Found {len(env_alarms)} alarms for {environment}:")
                  for alarm in env_alarms:
                      state = alarm['StateValue']
                      state_icon = "✅" if state == "OK" else "⚠️" if state == "ALARM" else "❓"
                      print(f"  {state_icon} {alarm['AlarmName']}: {state}")

                  return True

              except ClientError as e:
                  print(f"❌ Error checking alarm states: {e}")
                  return False

          def test_log_groups():
              """Test CloudWatch Logs setup"""
              try:
                  logs = boto3.client('logs')
                  environment = os.getenv('ENVIRONMENT', 'staging')

                  # Check for expected log groups
                  expected_log_groups = [
                      f'/aws/lambda/shieldcraft-forecaster-{environment}',
                      f'/aws/apigateway/shieldcraft-api-{environment}',
                      f'/aws/stepfunctions/ShieldCraftWorkflow-{environment}'
                  ]

                  existing_log_groups = []

                  try:
                      response = logs.describe_log_groups()
                      log_group_names = [lg['logGroupName'] for lg in response['logGroups']]

                      for expected_lg in expected_log_groups:
                          if any(expected_lg in lg for lg in log_group_names):
                              existing_log_groups.append(expected_lg)
                              print(f"✅ Log group exists: {expected_lg}")
                          else:
                              print(f"⚠️ Log group not found: {expected_lg}")

                  except ClientError as e:
                      print(f"ℹ️ Could not check log groups: {e}")

                  return True

              except Exception as e:
                  print(f"❌ Error testing log groups: {e}")
                  return False

          def main():
              environment = os.getenv('ENVIRONMENT', 'staging')
              print(f"Testing monitoring system for {environment}")

              tests = [
                  ("SNS Publishing", test_sns_publishing),
                  ("CloudWatch Custom Metrics", test_cloudwatch_custom_metrics),
                  ("CloudWatch Alarm States", test_alarm_states),
                  ("CloudWatch Log Groups", test_log_groups)
              ]

              passed = 0
              total = len(tests)

              for test_name, test_func in tests:
                  print(f"\n🧪 Running test: {test_name}")
                  try:
                      if test_func():
                          passed += 1
                      else:
                          print(f"❌ Test failed: {test_name}")
                  except Exception as e:
                      print(f"❌ Test error in {test_name}: {e}")

              print(f"\n📊 Test Results: {passed}/{total} tests passed")

              if passed == total:
                  print(f"✅ All monitoring tests passed for {environment}")
              elif passed >= total * 0.7:  # 70% pass rate
                  print(f"⚠️ Monitoring tests mostly passed ({passed}/{total}) for {environment}")
              else:
                  print(f"❌ Monitoring tests failed ({passed}/{total}) for {environment}")
                  exit(1)

          if __name__ == "__main__":
              main()
          EOF

          python test_monitoring.py

  validate-monitoring:
    name: Validate Monitoring Setup
    runs-on: ubuntu-latest
    needs: [setup-cloudwatch, setup-sns-alerts]
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
        continue-on-error: true

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install boto3

      - name: Validate monitoring configuration
        env:
          ENVIRONMENT: ${{ github.event.inputs.environment || 'staging' }}
        run: |
          cat > validate_monitoring.py << 'EOF'
          import boto3
          import json
          import os
          from botocore.exceptions import ClientError

          def validate_monitoring_setup():
              """Comprehensive validation of monitoring setup"""
              environment = os.getenv('ENVIRONMENT', 'staging')
              validation_results = {
                  'environment': environment,
                  'cloudwatch_dashboard': False,
                  'cloudwatch_alarms': 0,
                  'sns_topics': 0,
                  'log_groups': 0,
                  'issues': []
              }

              try:
                  # Validate CloudWatch Dashboard
                  cloudwatch = boto3.client('cloudwatch')

                  dashboards = cloudwatch.list_dashboards()
                  dashboard_name = f"ShieldCraft-AI-{environment}"

                  dashboard_exists = any(
                      d['DashboardName'] == dashboard_name
                      for d in dashboards['DashboardEntries']
                  )

                  validation_results['cloudwatch_dashboard'] = dashboard_exists

                  if dashboard_exists:
                      print(f"✅ CloudWatch dashboard exists: {dashboard_name}")
                  else:
                      print(f"⚠️ CloudWatch dashboard missing: {dashboard_name}")
                      validation_results['issues'].append(f"Missing CloudWatch dashboard: {dashboard_name}")

                  # Validate CloudWatch Alarms
                  alarms = cloudwatch.describe_alarms(
                      AlarmNamePrefix='ShieldCraft-'
                  )

                  env_alarms = [
                      alarm for alarm in alarms['MetricAlarms']
                      if environment in alarm['AlarmName']
                  ]

                  validation_results['cloudwatch_alarms'] = len(env_alarms)

                  if env_alarms:
                      print(f"✅ Found {len(env_alarms)} CloudWatch alarms")
                      for alarm in env_alarms:
                          state = alarm['StateValue']
                          if state == 'ALARM':
                              validation_results['issues'].append(f"Alarm in ALARM state: {alarm['AlarmName']}")
                              print(f"🚨 Alarm in ALARM state: {alarm['AlarmName']}")
                  else:
                      print(f"⚠️ No CloudWatch alarms found for {environment}")
                      validation_results['issues'].append(f"No CloudWatch alarms configured for {environment}")

              except ClientError as e:
                  print(f"❌ Error validating CloudWatch: {e}")
                  validation_results['issues'].append(f"CloudWatch validation error: {str(e)}")

              try:
                  # Validate SNS Topics
                  sns = boto3.client('sns')

                  topics = sns.list_topics()
                  expected_topics = [
                      f'shieldcraft-alerts-{environment}',
                      f'shieldcraft-critical-{environment}',
                      f'shieldcraft-cost-{environment}'
                  ]

                  found_topics = []
                  for topic in topics['Topics']:
                      for expected in expected_topics:
                          if expected in topic['TopicArn']:
                              found_topics.append(expected)

                  validation_results['sns_topics'] = len(found_topics)

                  if found_topics:
                      print(f"✅ Found {len(found_topics)} SNS topics")
                      for topic in found_topics:
                          print(f"  - {topic}")
                  else:
                      print(f"⚠️ No SNS topics found for {environment}")
                      validation_results['issues'].append(f"No SNS topics configured for {environment}")

                  # Check for missing expected topics
                  missing_topics = set(expected_topics) - set(found_topics)
                  for missing in missing_topics:
                      validation_results['issues'].append(f"Missing SNS topic: {missing}")
                      print(f"⚠️ Missing SNS topic: {missing}")

              except ClientError as e:
                  print(f"❌ Error validating SNS: {e}")
                  validation_results['issues'].append(f"SNS validation error: {str(e)}")

              try:
                  # Validate CloudWatch Logs
                  logs = boto3.client('logs')

                  log_groups = logs.describe_log_groups()
                  env_log_groups = [
                      lg for lg in log_groups['logGroups']
                      if environment in lg['logGroupName'] and 'shieldcraft' in lg['logGroupName'].lower()
                  ]

                  validation_results['log_groups'] = len(env_log_groups)

                  if env_log_groups:
                      print(f"✅ Found {len(env_log_groups)} relevant log groups")
                  else:
                      print(f"ℹ️ No specific log groups found for {environment}")

              except ClientError as e:
                  print(f"ℹ️ Could not validate log groups: {e}")

              return validation_results

          def generate_monitoring_report(validation_results):
              """Generate monitoring validation report"""
              environment = validation_results['environment']

              print(f"\n{'='*60}")
              print(f"MONITORING VALIDATION REPORT - {environment.upper()}")
              print(f"{'='*60}")

              print(f"\n📊 Component Status:")
              print(f"  CloudWatch Dashboard: {'✅' if validation_results['cloudwatch_dashboard'] else '❌'}")
              print(f"  CloudWatch Alarms: {validation_results['cloudwatch_alarms']}")
              print(f"  SNS Topics: {validation_results['sns_topics']}")
              print(f"  Log Groups: {validation_results['log_groups']}")

              if validation_results['issues']:
                  print(f"\n⚠️ Issues Found ({len(validation_results['issues'])}):")
                  for i, issue in enumerate(validation_results['issues'], 1):
                      print(f"  {i}. {issue}")
              else:
                  print(f"\n✅ No issues found - monitoring is properly configured!")

              # Overall status
              critical_issues = [
                  issue for issue in validation_results['issues']
                  if 'missing' in issue.lower() or 'error' in issue.lower()
              ]

              if not critical_issues:
                  print(f"\n🎉 MONITORING VALIDATION PASSED for {environment}")
                  return True
              else:
                  print(f"\n🚨 MONITORING VALIDATION FAILED for {environment}")
                  print(f"   {len(critical_issues)} critical issues need attention")
                  return False

          def main():
              environment = os.getenv('ENVIRONMENT', 'staging')
              print(f"Validating monitoring setup for {environment}")

              validation_results = validate_monitoring_setup()

              # Generate report
              success = generate_monitoring_report(validation_results)

              # Save results to file
              with open(f'monitoring-validation-{environment}.json', 'w') as f:
                  json.dump(validation_results, f, indent=2)

              if not success:
                  exit(1)

          if __name__ == "__main__":
              main()
          EOF

          python validate_monitoring.py

      - name: Upload monitoring validation results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: monitoring-validation-results
          path: monitoring-validation-*.json

  monitoring-report:
    name: Generate Monitoring Report
    runs-on: ubuntu-latest
    needs:
      [setup-cloudwatch, setup-sns-alerts, test-monitoring, validate-monitoring]
    if: always()
    steps:
      - name: Download validation results
        uses: actions/download-artifact@v3
        continue-on-error: true

      - name: Generate comprehensive monitoring report
        run: |
          echo "# Monitoring Setup Report" > monitoring-report.md
          echo "Generated: $(date)" >> monitoring-report.md
          echo "Environment: ${{ github.event.inputs.environment || 'staging' }}" >> monitoring-report.md
          echo "Action: ${{ github.event.inputs.action || 'validate' }}" >> monitoring-report.md
          echo "" >> monitoring-report.md

          echo "## Setup Results Summary" >> monitoring-report.md
          echo "- CloudWatch Setup: ${{ needs.setup-cloudwatch.result }}" >> monitoring-report.md
          echo "- SNS Alert Setup: ${{ needs.setup-sns-alerts.result }}" >> monitoring-report.md
          echo "- Monitoring Tests: ${{ needs.test-monitoring.result }}" >> monitoring-report.md
          echo "- Validation: ${{ needs.validate-monitoring.result }}" >> monitoring-report.md
          echo "" >> monitoring-report.md

          echo "## Monitoring Components" >> monitoring-report.md

          echo "### CloudWatch" >> monitoring-report.md
          if [ "${{ needs.setup-cloudwatch.result }}" = "success" ]; then
            echo "✅ **Dashboard**: Successfully created/updated CloudWatch dashboard" >> monitoring-report.md
            echo "✅ **Alarms**: CloudWatch alarms configured for key metrics" >> monitoring-report.md
            echo "✅ **Metrics**: Custom metrics integration ready" >> monitoring-report.md
          else
            echo "❌ **Dashboard**: Issues with CloudWatch dashboard setup" >> monitoring-report.md
            echo "⚠️ **Alarms**: CloudWatch alarms may not be properly configured" >> monitoring-report.md
          fi
          echo "" >> monitoring-report.md

          echo "### SNS Alerts" >> monitoring-report.md
          if [ "${{ needs.setup-sns-alerts.result }}" = "success" ]; then
            echo "✅ **Topics**: SNS topics created for different alert types" >> monitoring-report.md
            echo "✅ **Policies**: Topic policies configured for cross-service access" >> monitoring-report.md
            echo "✅ **Integration**: Slack integration prepared" >> monitoring-report.md
          else
            echo "❌ **Topics**: Issues with SNS topic creation" >> monitoring-report.md
            echo "⚠️ **Integration**: Alert integration may not be working" >> monitoring-report.md
          fi
          echo "" >> monitoring-report.md

          echo "### Testing Results" >> monitoring-report.md
          if [ "${{ needs.test-monitoring.result }}" = "success" ]; then
            echo "✅ **SNS Testing**: Alert publishing works correctly" >> monitoring-report.md
            echo "✅ **Metrics Testing**: Custom metrics can be published" >> monitoring-report.md
            echo "✅ **Alarm Testing**: Alarm states are accessible" >> monitoring-report.md
          elif [ "${{ needs.test-monitoring.result }}" = "skipped" ]; then
            echo "⏭️ **Testing**: Monitoring tests were skipped (validation mode)" >> monitoring-report.md
          else
            echo "❌ **Testing**: Some monitoring tests failed" >> monitoring-report.md
          fi
          echo "" >> monitoring-report.md

          echo "## Operational Readiness" >> monitoring-report.md

          READY_COUNT=0
          TOTAL_COUNT=4

          if [ "${{ needs.setup-cloudwatch.result }}" = "success" ]; then
            echo "✅ CloudWatch dashboards and alarms operational" >> monitoring-report.md
            READY_COUNT=$((READY_COUNT + 1))
          else
            echo "❌ CloudWatch setup needs attention" >> monitoring-report.md
          fi

          if [ "${{ needs.setup-sns-alerts.result }}" = "success" ]; then
            echo "✅ SNS alert system operational" >> monitoring-report.md
            READY_COUNT=$((READY_COUNT + 1))
          else
            echo "❌ SNS alert system needs attention" >> monitoring-report.md
          fi

          if [ "${{ needs.validate-monitoring.result }}" = "success" ]; then
            echo "✅ Monitoring validation passed" >> monitoring-report.md
            READY_COUNT=$((READY_COUNT + 1))
          else
            echo "❌ Monitoring validation failed" >> monitoring-report.md
          fi

          if [ "${{ needs.test-monitoring.result }}" = "success" ] || [ "${{ needs.test-monitoring.result }}" = "skipped" ]; then
            echo "✅ Monitoring tests completed successfully" >> monitoring-report.md
            READY_COUNT=$((READY_COUNT + 1))
          else
            echo "❌ Monitoring tests failed" >> monitoring-report.md
          fi

          echo "" >> monitoring-report.md
          echo "**Overall Readiness: $READY_COUNT/$TOTAL_COUNT components operational**" >> monitoring-report.md
          echo "" >> monitoring-report.md

          echo "## Next Steps" >> monitoring-report.md
          echo "1. Review any failed components above" >> monitoring-report.md
          echo "2. Configure Slack webhook URLs in Lambda environment variables" >> monitoring-report.md
          echo "3. Test alert notifications end-to-end" >> monitoring-report.md
          echo "4. Set up monitoring runbooks for alert response" >> monitoring-report.md
          echo "5. Schedule regular monitoring health checks" >> monitoring-report.md

          if [ $READY_COUNT -eq $TOTAL_COUNT ]; then
            echo "" >> monitoring-report.md
            echo "🎉 **MONITORING SETUP COMPLETE** - All systems operational!" >> monitoring-report.md
          else
            echo "" >> monitoring-report.md
            echo "⚠️ **ACTION REQUIRED** - Some monitoring components need attention" >> monitoring-report.md
          fi

      - name: Upload monitoring report
        uses: actions/upload-artifact@v3
        with:
          name: monitoring-report
          path: monitoring-report.md

      - name: Check monitoring setup status
        run: |
          FAILED_JOBS=0

          if [ "${{ needs.setup-cloudwatch.result }}" = "failure" ]; then
            echo "❌ CloudWatch setup failed"
            FAILED_JOBS=$((FAILED_JOBS + 1))
          fi

          if [ "${{ needs.setup-sns-alerts.result }}" = "failure" ]; then
            echo "❌ SNS setup failed"
            FAILED_JOBS=$((FAILED_JOBS + 1))
          fi

          if [ "${{ needs.validate-monitoring.result }}" = "failure" ]; then
            echo "❌ Monitoring validation failed"
            FAILED_JOBS=$((FAILED_JOBS + 1))
          fi

          if [ $FAILED_JOBS -gt 0 ]; then
            echo "🚫 Monitoring setup failed - $FAILED_JOBS components need attention"
            exit 1
          else
            echo "✅ Monitoring setup completed successfully"
          fi
