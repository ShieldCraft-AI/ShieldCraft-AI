# Ensure Docker is available in CI before any Docker build/scan steps
---
name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  flow_commit:
    name: "Nox Orchestration: flow_commit"
    runs-on: ubuntu-latest
    environment: ci
    env:
      AWS_PROFILE_NAME: ${{ vars.AWS_PROFILE_NAME }}
      AWS_DEFAULT_REGION: ${{ vars.AWS_DEFAULT_REGION || 'af-south-1' }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1
      - name: Check required secrets
        run: |
          if [ -z "$AWS_PROFILE_NAME" ] || [ -z "$AWS_DEFAULT_REGION" ]; then
            echo "Missing required secrets: AWS_PROFILE_NAME or AWS_DEFAULT_REGION"; exit 1
          fi
      - name: Aggressive disk cleanup (pre-deps)
        run: |
          echo "::group::DISK_DEBUG: Aggressive disk cleanup (pre-deps)"
          sudo rm -rf /usr/share/dotnet /usr/local/lib/android /opt/ghc /usr/local/share/boost
          sudo rm -rf /opt/hostedtoolcache/CodeQL /opt/hostedtoolcache/go /usr/local/share/powershell
          sudo rm -rf "$AGENT_TOOLSDIRECTORY" || true
          sudo apt-get clean
          docker system prune -af --volumes
          docker builder prune -af
          poetry cache clear --all pypi || true
          pip cache purge || true
          rm -rf .pytest_cache .nox dist build __pycache__ *.pyc *.pyo
          echo "DISK_DEBUG: df -h after cleanup"
          df -h
          echo "DISK_DEBUG: du -sh workspace root"
          du -sh ./*
          echo "::endgroup::"
      - name: Clean Python/Nox artifacts (pre-Nox)
        run: |
          echo "::group::DISK_DEBUG: Clean Python/Nox artifacts (pre-Nox)"
          rm -rf .pytest_cache .nox dist build __pycache__ *.pyc *.pyo
          poetry cache clear --all pypi || true
          pip cache purge || true
          echo "DISK_DEBUG: df -h after Python/Nox artifact cleanup"
          df -h
          echo "DISK_DEBUG: du -sh workspace root"
          du -sh ./*
          echo "::endgroup::"
      - name: Read Python version from .python-version
        id: python_version
        run: echo "PYTHON_VERSION=$(cat .python-version)" >> $GITHUB_ENV
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ steps.python_version.outputs.PYTHON_VERSION }}
      - name: Cache Poetry and pip
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip
            ~/.cache/pypoetry
            ~/.virtualenvs
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}-py${{ steps.python_version.outputs.PYTHON_VERSION }}
          restore-keys: |
            ${{ runner.os }}-poetry-
      - name: Install Poetry
        run: pip install poetry
      - name: Install project dependencies (main only)
        run: |
          echo "::group::DISK_DEBUG: Install project dependencies (main only)"
          poetry install --with dev --no-interaction --no-root
          poetry cache clear --all pypi || true
          pip cache purge || true
          echo "DISK_DEBUG: df -h after poetry install"
          df -h
          echo "DISK_DEBUG: du -sh workspace root"
          du -sh ./*
          echo "::endgroup::"
      - name: Run all checks via Nox (flow_commit)
        run: |
          echo "::group::DISK_DEBUG: Run all checks via Nox (flow_commit)"
          export PYTHONPATH=$(pwd)
          poetry run nox -s commit_flow
          poetry cache clear --all pypi || true
          pip cache purge || true
          echo "DISK_DEBUG: df -h after Nox checks"
          df -h
          echo "DISK_DEBUG: du -sh workspace root"
          du -sh ./*
          echo "::endgroup::"
      - name: Aggressive disk cleanup (post-Nox)
        run: |
          echo "::group::DISK_DEBUG: Aggressive disk cleanup (post-Nox)"
          rm -rf .pytest_cache .nox dist build __pycache__ *.pyc *.pyo
          poetry cache clear --all pypi || true
          pip cache purge || true
          docker system prune -af --volumes
          docker builder prune -af
          echo "DISK_DEBUG: df -h after post-Nox cleanup"
          df -h
          echo "DISK_DEBUG: du -sh workspace root"
          du -sh ./*
          echo "::endgroup::"

  docs_site_e2e:
    name: "Docs Site E2E"
    runs-on: ubuntu-latest
    needs: [flow_commit]
    timeout-minutes: 60
    env:
      E2E_GOOGLE_EMAIL: ${{ secrets.E2E_GOOGLE_EMAIL }}
      E2E_GOOGLE_PASSWORD: ${{ secrets.E2E_GOOGLE_PASSWORD }}
      E2E_AMAZON_EMAIL: ${{ secrets.E2E_AMAZON_EMAIL }}
      E2E_AMAZON_PASSWORD: ${{ secrets.E2E_AMAZON_PASSWORD }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1
      - name: Announce hosted UI credential availability
        run: |
          if [ -z "$E2E_GOOGLE_EMAIL" ] || [ -z "$E2E_GOOGLE_PASSWORD" ]; then
            echo "::warning ::E2E Google credentials not supplied - hosted UI flow will be skipped."
          else
            echo "Hosted UI Google credentials detected; real OAuth flow will be executed."
          fi
      - name: Use Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: docs-site/package-lock.json
      - name: Install docs-site dependencies
        working-directory: docs-site
        run: npm ci
      - name: Install Playwright browsers
        working-directory: docs-site
        run: npx playwright install --with-deps
      - name: Run docs-site e2e suite
        working-directory: docs-site
        run: npm run test:e2e
      - name: Upload Playwright HTML report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: docs-site-playwright-report
          path: docs-site/playwright-report
          if-no-files-found: ignore
          retention-days: 7

  cdk_deploy:
    if: false # Temporarily disable this job
    name: "CDK Deploy"
    runs-on: ubuntu-latest
    needs: [flow_commit]
    environment: prod
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1
      - name: Read Python version from .python-version
        id: python_version
        run: echo "PYTHON_VERSION=$(cat .python-version)" >> $GITHUB_ENV
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ steps.python_version.outputs.PYTHON_VERSION }}
      - name: Install Poetry
        run: pip install poetry
      - name: Install project dependencies
        run: poetry install --no-interaction --no-root --with dev
      - name: Configure AWS credentials (OIDC, Identity Center)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_OIDC_ROLE_ARN }}
          aws-region: ${{ vars.AWS_DEFAULT_REGION || 'af-south-1' }}
      - name: Install AWS CDK CLI (v2)
        run: npm install -g aws-cdk
      - name: CDK Synthesis (Validation)
        run: cdk synth
      - name: Deploy AWS CDK stacks via Nox
        env:
          AWS_PROFILE: ${{ vars.AWS_PROFILE_NAME }}
          AWS_REGION: ${{ vars.AWS_DEFAULT_REGION || 'af-south-1' }}
          AWS_DEFAULT_REGION: ${{ vars.AWS_DEFAULT_REGION || 'af-south-1' }}
        # Optional: Add notification for failed builds (Slack example, requires webhook secret)
        # on:
        #   workflow_run:
        #     workflows: ["CI"]
        #     types:
        #       - completed
        # jobs:
        #   notify:
        #     if: ${{ github.event.workflow_run.conclusion == 'failure' }}
        #     runs-on: ubuntu-latest
        #     steps:
        #       - name: Send Slack notification
        #         run: |
        #           curl -X POST -H 'Content-type: application/json' --data '{"text":"ShieldCraft CI failed: ${{ github.event.workflow_run.name }}"}' ${{ secrets.SLACK_WEBHOOK_URL }}
        run: poetry run nox -s cdk_deploy

  docker_build:
    if: false # Temporarily disable this job
    name: "Docker Build"
    runs-on: ubuntu-latest
    needs: [flow_commit]
    environment: ci
    strategy:
      matrix:
        include:
          - service: api
            dockerfile: Dockerfile.api
            image_name: shieldcraft-api
          - service: ingestion
            dockerfile: Dockerfile.ingestion
            image_name: shieldcraft-ingestion
          - service: main
            dockerfile: Dockerfile
            image_name: shieldcraft-main
    outputs:
      image_tag: ${{ steps.export_tag.outputs.image_tag }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1
      - name: Read Python version from .python-version
        id: python_version
        run: echo "PYTHON_VERSION=$(cat .python-version)" >> $GITHUB_ENV
      - name: Debug PYTHON_VERSION
        run: echo "PYTHON_VERSION is $PYTHON_VERSION"
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Set image tag
        id: meta
        run: echo "image_tag=ghcr.io/$(echo '${{ github.repository_owner }}' | tr '[:upper:]' '[:lower:]')/${{ matrix.image_name }}:${{ github.sha }}" >> $GITHUB_OUTPUT
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push with BuildKit cache
        uses: docker/build-push-action@v5
        with:
          build-args: |
            PYTHON_VERSION=${{ env.PYTHON_VERSION }}
          context: .
          file: ${{ matrix.dockerfile }}
          target: final
          push: true
          tags: ${{ steps.meta.outputs.image_tag }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: |
            linux/amd64
            linux/arm64
      - name: Export image tag
        id: export_tag
        run: echo "image_tag=${{ steps.meta.outputs.image_tag }}" >> $GITHUB_ENV
      - name: Aggressive Docker Cleanup
        run: |
          docker system prune -af --volumes
          docker builder prune -af
          df -h

  docker_scan:
    name: "Docker Scan"
    runs-on: ubuntu-latest
    needs: [docker_build]
    environment: ci
    strategy:
      matrix:
        include:
          - service: api
            image_name: shieldcraft-api
          - service: ingestion
            image_name: shieldcraft-ingestion
          - service: main
            image_name: shieldcraft-main
    steps:
      - uses: actions/checkout@v4
      - name: Set image tag
        id: meta
        run: echo "IMAGE_TAG=ghcr.io/$(echo '${{ github.repository_owner }}' | tr '[:upper:]' '[:lower:]')/${{ matrix.image_name }}:${{ github.sha }}" >> $GITHUB_ENV
      - name: Pull built image
        run: |
          docker pull "$IMAGE_TAG"
      - name: Docker Scan
        run: |
          docker pull aquasec/trivy:latest
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
            aquasec/trivy:latest image "$IMAGE_TAG"
          docker pull anchore/grype:latest
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
            anchore/grype:latest "$IMAGE_TAG"

# Fail fast: if any job fails, the workflow stops (default in GitHub Actions unless using a matrix with fail-fast: false)
