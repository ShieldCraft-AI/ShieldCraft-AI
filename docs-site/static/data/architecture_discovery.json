{
  "capabilities": {
    "ingestion": {
      "capability_id": "ingestion",
      "capability_name": "Data Ingestion & Event Streaming",
      "description": "Ingest security telemetry from multiple sources with reliable, scalable patterns",
      "category": "data-plane",
      "environments": {
        "dev": {
          "service_name": "eventbridge",
          "template_file": "/home/dee/workspace/AI/shieldcraft-ai/proton/eventbridge-service-template.yaml",
          "environment": "dev",
          "mode": "managed",
          "enabled": true,
          "instance_config": {
            "enabled": true,
            "mode": "managed",
            "data_bus_name": "shieldcraft-dev-data-bus",
            "security_bus_name": "shieldcraft-dev-security-bus",
            "lambda_export_name": "DevMskTopicCreatorLambdaArn",
            "data_event_source": "shieldcraft.data.dev"
          },
          "estimated_monthly_cost_usd": 0.5,
          "capability_category": "ingestion",
          "aws_resources": [
            "AWS::Events::EventBus",
            "AWS::Events::Rule"
          ],
          "dependencies": [],
          "security_features": []
        },
        "staging": {
          "service_name": "eventbridge",
          "template_file": "/home/dee/workspace/AI/shieldcraft-ai/proton/eventbridge-service-template.yaml",
          "environment": "staging",
          "mode": "managed",
          "enabled": true,
          "instance_config": {
            "enabled": true,
            "mode": "managed",
            "data_bus_name": "shieldcraft-staging-data-bus",
            "security_bus_name": "shieldcraft-staging-security-bus",
            "lambda_export_name": "StagingMskTopicCreatorLambdaArn",
            "data_event_source": "shieldcraft.data.staging"
          },
          "estimated_monthly_cost_usd": 5.0,
          "capability_category": "ingestion",
          "aws_resources": [
            "AWS::Events::EventBus",
            "AWS::Events::Rule"
          ],
          "dependencies": [],
          "security_features": []
        },
        "prod": {
          "service_name": "eventbridge",
          "template_file": "/home/dee/workspace/AI/shieldcraft-ai/proton/eventbridge-service-template.yaml",
          "environment": "prod",
          "mode": "managed",
          "enabled": true,
          "instance_config": {
            "enabled": true,
            "mode": "managed",
            "data_bus_name": "shieldcraft-prod-data-bus",
            "security_bus_name": "shieldcraft-prod-security-bus",
            "lambda_export_name": "ProdMskTopicCreatorLambdaArn",
            "data_event_source": "shieldcraft.data.prod"
          },
          "estimated_monthly_cost_usd": 50.0,
          "capability_category": "ingestion",
          "aws_resources": [
            "AWS::Events::EventBus",
            "AWS::Events::Rule"
          ],
          "dependencies": [],
          "security_features": []
        }
      },
      "service_progression": {
        "dev": "Managed deployment for dev environment",
        "staging": "Managed deployment for staging environment",
        "prod": "Managed deployment for prod environment"
      },
      "cost_progression": {
        "dev": 0.5,
        "staging": 672.5,
        "prod": 2381.0
      },
      "active_services_by_env": {
        "dev": [
          "eventbridge",
          "airbyte"
        ],
        "staging": [
          "eventbridge",
          "msk",
          "airbyte"
        ],
        "prod": [
          "eventbridge",
          "msk",
          "airbyte"
        ]
      },
      "per_service_costs_by_env": {
        "dev": {
          "eventbridge": 0.5,
          "airbyte": 0.0
        },
        "staging": {
          "eventbridge": 5.0,
          "msk": 547.5,
          "airbyte": 120.0
        },
        "prod": {
          "eventbridge": 50.0,
          "msk": 1971.0,
          "airbyte": 360.0
        }
      },
      "proof_links": [
        {
          "label": "Dev Configuration",
          "href": "/config/dev.yml",
          "kind": "code"
        },
        {
          "label": "Staging Configuration",
          "href": "/config/staging.yml",
          "kind": "code"
        },
        {
          "label": "Prod Configuration",
          "href": "/config/prod.yml",
          "kind": "code"
        },
        {
          "label": "Eventbridge Template",
          "href": "/proton/eventbridge-service-template.yaml",
          "kind": "code"
        },
        {
          "label": "Msk Template",
          "href": "/proton/msk-service-template.yaml",
          "kind": "code"
        },
        {
          "label": "Airbyte Template",
          "href": "/proton/airbyte-service-template.yaml",
          "kind": "code"
        }
      ]
    },
    "processing": {
      "capability_id": "processing",
      "capability_name": "Stream Processing & Transformation",
      "description": "Real-time processing of security events with intelligent correlation",
      "category": "data-plane",
      "environments": {
        "dev": {
          "service_name": "lambda",
          "template_file": "/home/dee/workspace/AI/shieldcraft-ai/proton/lambda-service-template.yaml",
          "environment": "dev",
          "mode": "managed",
          "enabled": true,
          "instance_config": {
            "enabled": true,
            "mode": "managed",
            "functions": [
              {
                "id": "MskTopicCreator",
                "description": "Lambda to create Kafka topics after MSK cluster is ready",
                "handler": "msk_topic_creator.lambda_handler",
                "runtime": "python{{ PYTHON_VERSION }}",
                "memory_size": 256,
                "timeout": 60,
                "environment": {
                  "MSK_CLUSTER_NAME": "shieldcraft-msk-cluster",
                  "TOPICS": [
                    {
                      "name": "events-ingest",
                      "partitions": 3,
                      "replication_factor": 2
                    },
                    {
                      "name": "audit-log",
                      "partitions": 2,
                      "replication_factor": 2
                    }
                  ]
                },
                "vpc_subnet_ids": [
                  "subnet-priv-a",
                  "subnet-priv-b"
                ],
                "security_group_ids": [
                  "sg-lambda"
                ],
                "policies": [
                  "kafka:DescribeCluster",
                  "kafka:GetBootstrapBrokers",
                  "kafka:CreateTopic",
                  "kafka:ListTopics",
                  "kafka:DescribeTopic"
                ]
              }
            ]
          },
          "estimated_monthly_cost_usd": 2.5,
          "capability_category": "processing",
          "aws_resources": [
            "AWS::Lambda::Function"
          ],
          "dependencies": [
            "networking"
          ],
          "security_features": [
            "iam_roles",
            "vpc_networking",
            "security_groups"
          ]
        },
        "staging": {
          "service_name": "lambda",
          "template_file": "/home/dee/workspace/AI/shieldcraft-ai/proton/lambda-service-template.yaml",
          "environment": "staging",
          "mode": "managed",
          "enabled": true,
          "instance_config": {
            "enabled": true,
            "mode": "managed",
            "functions": [
              {
                "id": "MskTopicCreator",
                "description": "Lambda to create Kafka topics after MSK cluster is ready",
                "handler": "msk_topic_creator.lambda_handler",
                "runtime": "python{{ PYTHON_VERSION }}",
                "memory_size": 256,
                "timeout": 60,
                "environment": {
                  "MSK_CLUSTER_NAME": "shieldcraft-msk-cluster-staging",
                  "TOPICS": [
                    {
                      "name": "events-ingest",
                      "partitions": 3,
                      "replication_factor": 2
                    },
                    {
                      "name": "audit-log",
                      "partitions": 2,
                      "replication_factor": 2
                    }
                  ]
                },
                "vpc_subnet_ids": [
                  "subnet-priv-a",
                  "subnet-priv-b"
                ],
                "security_group_ids": [
                  "sg-lambda"
                ],
                "policies": [
                  "kafka:DescribeCluster",
                  "kafka:GetBootstrapBrokers",
                  "kafka:CreateTopic",
                  "kafka:ListTopics",
                  "kafka:DescribeTopic"
                ]
              }
            ]
          },
          "estimated_monthly_cost_usd": 25.0,
          "capability_category": "processing",
          "aws_resources": [
            "AWS::Lambda::Function"
          ],
          "dependencies": [
            "networking"
          ],
          "security_features": [
            "iam_roles",
            "vpc_networking",
            "security_groups"
          ]
        },
        "prod": {
          "service_name": "lambda",
          "template_file": "/home/dee/workspace/AI/shieldcraft-ai/proton/lambda-service-template.yaml",
          "environment": "prod",
          "mode": "managed",
          "enabled": true,
          "instance_config": {
            "enabled": true,
            "mode": "managed",
            "functions": [
              {
                "id": "MskTopicCreator",
                "description": "Lambda to create Kafka topics after MSK cluster is ready",
                "handler": "msk_topic_creator.lambda_handler",
                "runtime": "python{{ PYTHON_VERSION }}",
                "memory_size": 512,
                "timeout": 120,
                "environment": {
                  "MSK_CLUSTER_NAME": "shieldcraft-msk-cluster-prod",
                  "TOPICS": [
                    {
                      "name": "events-ingest",
                      "partitions": 6,
                      "replication_factor": 3
                    },
                    {
                      "name": "audit-log",
                      "partitions": 3,
                      "replication_factor": 3
                    }
                  ]
                },
                "vpc_subnet_ids": [
                  "subnet-priv-a",
                  "subnet-priv-b",
                  "subnet-priv-c"
                ],
                "security_group_ids": [
                  "sg-lambda"
                ],
                "policies": [
                  "kafka:DescribeCluster",
                  "kafka:GetBootstrapBrokers",
                  "kafka:CreateTopic",
                  "kafka:ListTopics",
                  "kafka:DescribeTopic"
                ]
              }
            ]
          },
          "estimated_monthly_cost_usd": 200.0,
          "capability_category": "processing",
          "aws_resources": [
            "AWS::Lambda::Function"
          ],
          "dependencies": [
            "networking"
          ],
          "security_features": [
            "iam_roles",
            "vpc_networking",
            "security_groups"
          ]
        }
      },
      "service_progression": {
        "dev": "Managed deployment for dev environment",
        "staging": "Managed deployment for staging environment",
        "prod": "Managed deployment for prod environment"
      },
      "cost_progression": {
        "dev": 8.5,
        "staging": 80.0,
        "prod": 480.0
      },
      "active_services_by_env": {
        "dev": [
          "lambda",
          "glue",
          "stepfunctions"
        ],
        "staging": [
          "lambda",
          "glue",
          "stepfunctions"
        ],
        "prod": [
          "lambda",
          "glue",
          "stepfunctions"
        ]
      },
      "per_service_costs_by_env": {
        "dev": {
          "lambda": 2.5,
          "glue": 5.0,
          "stepfunctions": 1.0
        },
        "staging": {
          "lambda": 25.0,
          "glue": 45.0,
          "stepfunctions": 10.0
        },
        "prod": {
          "lambda": 200.0,
          "glue": 180.0,
          "stepfunctions": 100.0
        }
      },
      "proof_links": [
        {
          "label": "Dev Configuration",
          "href": "/config/dev.yml",
          "kind": "code"
        },
        {
          "label": "Staging Configuration",
          "href": "/config/staging.yml",
          "kind": "code"
        },
        {
          "label": "Prod Configuration",
          "href": "/config/prod.yml",
          "kind": "code"
        },
        {
          "label": "Lambda Template",
          "href": "/proton/lambda-service-template.yaml",
          "kind": "code"
        },
        {
          "label": "Glue Template",
          "href": "/proton/glue-service-template.yaml",
          "kind": "code"
        },
        {
          "label": "Stepfunctions Template",
          "href": "/proton/stepfunctions-service-template.yaml",
          "kind": "code"
        }
      ]
    },
    "storage": {
      "capability_id": "storage",
      "capability_name": "Data Lake & Search Analytics",
      "description": "Governed data lake with fast search and analytics capabilities",
      "category": "data-plane",
      "environments": {
        "dev": {
          "service_name": "s3",
          "template_file": "/home/dee/workspace/AI/shieldcraft-ai/proton/s3-service-template.yaml",
          "environment": "dev",
          "mode": "managed",
          "enabled": true,
          "instance_config": {
            "enabled": true,
            "mode": "managed",
            "buckets": [
              {
                "id": "RawDataBucket",
                "name": "shieldcraft-dev-raw",
                "versioned": true,
                "encryption": "S3_MANAGED",
                "block_public_access": "BLOCK_ALL",
                "removal_policy": "DESTROY",
                "enable_glue_crawler": true,
                "crawler": {
                  "schedule": "cron(0 2 * * ? *)",
                  "table_prefix": "raw_"
                },
                "lifecycle_rules": [
                  {
                    "id": "transition-raw-dev",
                    "enabled": true,
                    "transitions": [
                      {
                        "days": 30,
                        "storage_class": "STANDARD_IA"
                      },
                      {
                        "days": 60,
                        "storage_class": "GLACIER"
                      }
                    ],
                    "expiration_days": 365,
                    "abort_incomplete_multipart_upload_days": 7
                  }
                ]
              },
              {
                "id": "ProcessedDataBucket",
                "name": "shieldcraft-dev-processed",
                "versioned": true,
                "encryption": "S3_MANAGED",
                "block_public_access": "BLOCK_ALL",
                "removal_policy": "DESTROY",
                "enable_glue_crawler": true,
                "crawler": {
                  "schedule": "cron(0 3 * * ? *)",
                  "table_prefix": "processed_"
                },
                "lifecycle_rules": [
                  {
                    "id": "transition-processed-dev",
                    "enabled": true,
                    "transitions": [
                      {
                        "days": 30,
                        "storage_class": "STANDARD_IA"
                      },
                      {
                        "days": 60,
                        "storage_class": "GLACIER"
                      }
                    ],
                    "expiration_days": 365,
                    "abort_incomplete_multipart_upload_days": 7
                  }
                ]
              },
              {
                "id": "AnalyticsDataBucket",
                "name": "shieldcraft-dev-analytics",
                "versioned": true,
                "encryption": "S3_MANAGED",
                "block_public_access": "BLOCK_ALL",
                "removal_policy": "DESTROY",
                "enable_glue_crawler": true,
                "crawler": {
                  "schedule": "cron(0 4 * * ? *)",
                  "table_prefix": "analytics_"
                },
                "lifecycle_rules": [
                  {
                    "id": "transition-analytics-dev",
                    "enabled": true,
                    "transitions": [
                      {
                        "days": 30,
                        "storage_class": "STANDARD_IA"
                      },
                      {
                        "days": 60,
                        "storage_class": "GLACIER"
                      }
                    ],
                    "expiration_days": 365,
                    "abort_incomplete_multipart_upload_days": 7
                  }
                ]
              }
            ],
            "lifecycle_policy_days": 30,
            "enable_access_logs": true
          },
          "estimated_monthly_cost_usd": 9.0,
          "capability_category": "storage",
          "aws_resources": [
            "AWS::S3::Bucket"
          ],
          "dependencies": [
            "s3"
          ],
          "security_features": [
            "encryption",
            "iam_policies"
          ]
        },
        "staging": {
          "service_name": "s3",
          "template_file": "/home/dee/workspace/AI/shieldcraft-ai/proton/s3-service-template.yaml",
          "environment": "staging",
          "mode": "managed",
          "enabled": true,
          "instance_config": {
            "enabled": true,
            "mode": "managed",
            "buckets": [
              {
                "id": "RawDataBucket",
                "name": "shieldcraft-staging-raw",
                "versioned": true,
                "encryption": "S3_MANAGED",
                "block_public_access": "BLOCK_ALL",
                "removal_policy": "DESTROY",
                "lifecycle_rules": [
                  {
                    "id": "transition-raw-staging",
                    "enabled": true,
                    "transitions": [
                      {
                        "days": 60,
                        "storage_class": "STANDARD_IA"
                      },
                      {
                        "days": 120,
                        "storage_class": "GLACIER"
                      }
                    ],
                    "expiration_days": 730,
                    "abort_incomplete_multipart_upload_days": 7
                  }
                ]
              },
              {
                "id": "ProcessedDataBucket",
                "name": "shieldcraft-staging-processed",
                "versioned": true,
                "encryption": "S3_MANAGED",
                "block_public_access": "BLOCK_ALL",
                "removal_policy": "DESTROY",
                "lifecycle_rules": [
                  {
                    "id": "transition-processed-staging",
                    "enabled": true,
                    "transitions": [
                      {
                        "days": 60,
                        "storage_class": "STANDARD_IA"
                      },
                      {
                        "days": 120,
                        "storage_class": "GLACIER"
                      }
                    ],
                    "expiration_days": 730,
                    "abort_incomplete_multipart_upload_days": 7
                  }
                ]
              },
              {
                "id": "AnalyticsDataBucket",
                "name": "shieldcraft-staging-analytics",
                "versioned": true,
                "encryption": "S3_MANAGED",
                "block_public_access": "BLOCK_ALL",
                "removal_policy": "DESTROY",
                "lifecycle_rules": [
                  {
                    "id": "transition-analytics-staging",
                    "enabled": true,
                    "transitions": [
                      {
                        "days": 60,
                        "storage_class": "STANDARD_IA"
                      },
                      {
                        "days": 120,
                        "storage_class": "GLACIER"
                      }
                    ],
                    "expiration_days": 730,
                    "abort_incomplete_multipart_upload_days": 7
                  }
                ]
              }
            ],
            "lifecycle_policy_days": 60,
            "enable_access_logs": true
          },
          "estimated_monthly_cost_usd": 36.0,
          "capability_category": "storage",
          "aws_resources": [
            "AWS::S3::Bucket"
          ],
          "dependencies": [
            "s3"
          ],
          "security_features": [
            "encryption",
            "iam_policies"
          ]
        },
        "prod": {
          "service_name": "s3",
          "template_file": "/home/dee/workspace/AI/shieldcraft-ai/proton/s3-service-template.yaml",
          "environment": "prod",
          "mode": "managed",
          "enabled": true,
          "instance_config": {
            "enabled": true,
            "mode": "managed",
            "buckets": [
              {
                "id": "RawDataBucket",
                "name": "shieldcraft-prod-raw",
                "versioned": true,
                "encryption": "S3_MANAGED",
                "block_public_access": "BLOCK_ALL",
                "removal_policy": "RETAIN",
                "lifecycle_rules": [
                  {
                    "id": "transition-raw-prod",
                    "enabled": true,
                    "transitions": [
                      {
                        "days": 90,
                        "storage_class": "STANDARD_IA"
                      },
                      {
                        "days": 180,
                        "storage_class": "GLACIER"
                      }
                    ],
                    "expiration_days": 1095,
                    "abort_incomplete_multipart_upload_days": 7
                  }
                ]
              },
              {
                "id": "ProcessedDataBucket",
                "name": "shieldcraft-prod-processed",
                "versioned": true,
                "encryption": "S3_MANAGED",
                "block_public_access": "BLOCK_ALL",
                "removal_policy": "RETAIN",
                "lifecycle_rules": [
                  {
                    "id": "transition-processed-prod",
                    "enabled": true,
                    "transitions": [
                      {
                        "days": 90,
                        "storage_class": "STANDARD_IA"
                      },
                      {
                        "days": 180,
                        "storage_class": "GLACIER"
                      }
                    ],
                    "expiration_days": 1095,
                    "abort_incomplete_multipart_upload_days": 7
                  }
                ]
              },
              {
                "id": "AnalyticsDataBucket",
                "name": "shieldcraft-prod-analytics",
                "versioned": true,
                "encryption": "S3_MANAGED",
                "block_public_access": "BLOCK_ALL",
                "lifecycle_rules": [
                  {
                    "id": "transition-analytics-prod",
                    "enabled": true,
                    "transitions": [
                      {
                        "days": 90,
                        "storage_class": "STANDARD_IA"
                      },
                      {
                        "days": 180,
                        "storage_class": "GLACIER"
                      }
                    ],
                    "expiration_days": 1095,
                    "abort_incomplete_multipart_upload_days": 7
                  }
                ]
              }
            ],
            "lifecycle_policy_days": 90,
            "enable_access_logs": true
          },
          "estimated_monthly_cost_usd": 105.0,
          "capability_category": "storage",
          "aws_resources": [
            "AWS::S3::Bucket"
          ],
          "dependencies": [
            "s3"
          ],
          "security_features": [
            "encryption",
            "iam_policies"
          ]
        }
      },
      "service_progression": {
        "dev": "Managed deployment for dev environment",
        "staging": "Managed deployment for staging environment",
        "prod": "Managed deployment for prod environment"
      },
      "cost_progression": {
        "dev": 9.0,
        "staging": 102.6,
        "prod": 1093.9099999999999
      },
      "active_services_by_env": {
        "dev": [
          "s3",
          "lakeformation"
        ],
        "staging": [
          "s3",
          "opensearch",
          "lakeformation"
        ],
        "prod": [
          "s3",
          "opensearch",
          "lakeformation"
        ]
      },
      "per_service_costs_by_env": {
        "dev": {
          "s3": 9.0,
          "lakeformation": 0.0
        },
        "staging": {
          "s3": 36.0,
          "opensearch": 61.6,
          "lakeformation": 5.0
        },
        "prod": {
          "s3": 105.0,
          "opensearch": 938.91,
          "lakeformation": 50.0
        }
      },
      "proof_links": [
        {
          "label": "Dev Configuration",
          "href": "/config/dev.yml",
          "kind": "code"
        },
        {
          "label": "Staging Configuration",
          "href": "/config/staging.yml",
          "kind": "code"
        },
        {
          "label": "Prod Configuration",
          "href": "/config/prod.yml",
          "kind": "code"
        },
        {
          "label": "S3 Template",
          "href": "/proton/s3-service-template.yaml",
          "kind": "code"
        },
        {
          "label": "Opensearch Template",
          "href": "/proton/opensearch-service-template.yaml",
          "kind": "code"
        },
        {
          "label": "Lakeformation Template",
          "href": "/proton/lakeformation-service-template.yaml",
          "kind": "code"
        }
      ]
    },
    "ml": {
      "capability_id": "ml",
      "capability_name": "AI/ML Risk Scoring & Models",
      "description": "ML-powered threat detection and automated risk scoring",
      "category": "actions",
      "environments": {
        "staging": {
          "service_name": "sagemaker",
          "template_file": "/home/dee/workspace/AI/shieldcraft-ai/proton/sagemaker-service-template.yaml",
          "environment": "staging",
          "mode": "managed",
          "enabled": true,
          "instance_config": {
            "enabled": true,
            "mode": "managed",
            "training_instance_type": "ml.m5.xlarge",
            "inference_instance_type": "ml.m5.large",
            "endpoint_auto_scaling": true,
            "model_registry": "shieldcraft-model-registry-staging"
          },
          "estimated_monthly_cost_usd": 89.55,
          "capability_category": "ml",
          "aws_resources": [
            "AWS::SageMaker::Model",
            "AWS::SageMaker::EndpointConfig",
            "AWS::SageMaker::Endpoint"
          ],
          "dependencies": [],
          "security_features": []
        },
        "prod": {
          "service_name": "sagemaker",
          "template_file": "/home/dee/workspace/AI/shieldcraft-ai/proton/sagemaker-service-template.yaml",
          "environment": "prod",
          "mode": "managed",
          "enabled": true,
          "instance_config": {
            "enabled": true,
            "mode": "managed",
            "training_instance_type": "ml.m5.2xlarge",
            "inference_instance_type": "ml.m5.xlarge",
            "endpoint_auto_scaling": true,
            "model_registry": "shieldcraft-model-registry-prod",
            "multi_az_deployment": true,
            "data_capture_enabled": true,
            "model_monitoring_enabled": true
          },
          "estimated_monthly_cost_usd": 805.2,
          "capability_category": "ml",
          "aws_resources": [
            "AWS::SageMaker::Model",
            "AWS::SageMaker::EndpointConfig",
            "AWS::SageMaker::Endpoint"
          ],
          "dependencies": [],
          "security_features": []
        }
      },
      "service_progression": {
        "staging": "Managed SageMaker for model validation",
        "prod": "Production SageMaker with auto-scaling"
      },
      "cost_progression": {
        "staging": 89.55,
        "prod": 805.2
      },
      "active_services_by_env": {
        "staging": [
          "sagemaker"
        ],
        "prod": [
          "sagemaker"
        ]
      },
      "per_service_costs_by_env": {
        "staging": {
          "sagemaker": 89.55
        },
        "prod": {
          "sagemaker": 805.2
        }
      },
      "proof_links": [
        {
          "label": "Dev Configuration",
          "href": "/config/dev.yml",
          "kind": "code"
        },
        {
          "label": "Staging Configuration",
          "href": "/config/staging.yml",
          "kind": "code"
        },
        {
          "label": "Prod Configuration",
          "href": "/config/prod.yml",
          "kind": "code"
        },
        {
          "label": "Sagemaker Template",
          "href": "/proton/sagemaker-service-template.yaml",
          "kind": "code"
        },
        {
          "label": "Dataquality Template",
          "href": "/proton/dataquality-service-template.yaml",
          "kind": "code"
        }
      ]
    },
    "orchestration": {
      "capability_id": "orchestration",
      "capability_name": "Workflow Orchestration",
      "description": "Coordinated multi-step security workflows with error handling",
      "category": "actions",
      "environments": {
        "dev": {
          "service_name": "stepfunctions",
          "template_file": "/home/dee/workspace/AI/shieldcraft-ai/proton/stepfunctions-service-template.yaml",
          "environment": "dev",
          "mode": "managed",
          "enabled": true,
          "instance_config": {
            "enabled": true,
            "mode": "managed",
            "workflow_type": "express",
            "state_machines": [
              {
                "id": "DataIngestAndValidate",
                "name": "shieldcraft-dev-data-ingest-validate",
                "role_arn": "arn:aws:iam::123456789012:role/ShieldCraftStepFnRole",
                "comment": "Orchestrates data ingestion, validation, and error handling",
                "definition": [
                  {
                    "id": "IngestData",
                    "type": "Task",
                    "resource": "arn:aws:lambda:af-south-1:123456789012:function:IngestDataLambda",
                    "next": "ValidateData",
                    "catch": [
                      {
                        "handler": "HandleIngestError",
                        "errors": [
                          "States.ALL"
                        ]
                      }
                    ]
                  },
                  {
                    "id": "ValidateData",
                    "type": "Task",
                    "resource": "arn:aws:lambda:af-south-1:123456789012:function:ValidateDataLambda",
                    "next": "IsValid"
                  },
                  {
                    "id": "IsValid",
                    "type": "Choice",
                    "choices": [
                      {
                        "condition": "string_equals",
                        "args": [
                          "$.validationResult",
                          "PASS"
                        ],
                        "next": "Success"
                      },
                      {
                        "condition": "string_equals",
                        "args": [
                          "$.validationResult",
                          "FAIL"
                        ],
                        "next": "HandleValidationError"
                      }
                    ],
                    "default": "HandleValidationError"
                  },
                  {
                    "id": "Success",
                    "type": "Pass",
                    "end": true
                  },
                  {
                    "id": "HandleIngestError",
                    "type": "Pass",
                    "end": true
                  },
                  {
                    "id": "HandleValidationError",
                    "type": "Pass",
                    "end": true
                  }
                ]
              },
              {
                "id": "BenchmarkAndValidate",
                "name": "shieldcraft-dev-benchmark-validate",
                "role_arn": "arn:aws:iam::123456789012:role/ShieldCraftStepFnRole",
                "comment": "Orchestrates BEIR/MTEB benchmarking and model validation (dev: costless)",
                "definition": [
                  {
                    "id": "RunBEIRBenchmark",
                    "type": "Pass",
                    "next": "RunMTEBBenchmark"
                  },
                  {
                    "id": "RunMTEBBenchmark",
                    "type": "Pass",
                    "next": "ValidateBenchmarkResults"
                  },
                  {
                    "id": "ValidateBenchmarkResults",
                    "type": "Pass",
                    "next": "Success"
                  },
                  {
                    "id": "Success",
                    "type": "Pass",
                    "end": true
                  },
                  {
                    "id": "HandleBenchmarkError",
                    "type": "Pass",
                    "end": true
                  }
                ]
              }
            ]
          },
          "estimated_monthly_cost_usd": 1.0,
          "capability_category": "processing",
          "aws_resources": [
            "AWS::StepFunctions::StateMachine"
          ],
          "dependencies": [
            "iam"
          ],
          "security_features": [
            "iam_roles"
          ]
        },
        "staging": {
          "service_name": "stepfunctions",
          "template_file": "/home/dee/workspace/AI/shieldcraft-ai/proton/stepfunctions-service-template.yaml",
          "environment": "staging",
          "mode": "managed",
          "enabled": true,
          "instance_config": {
            "enabled": true,
            "mode": "managed",
            "state_machines": [
              {
                "id": "DataIngestAndValidate",
                "name": "shieldcraft-staging-data-ingest-validate",
                "role_arn": "arn:aws:iam::123456789012:role/ShieldCraftStepFnRole",
                "comment": "Orchestrates data ingestion, validation, and error handling",
                "definition": [
                  {
                    "id": "IngestData",
                    "type": "Task",
                    "resource": "arn:aws:lambda:af-south-1:123456789012:function:IngestDataLambda",
                    "next": "ValidateData",
                    "catch": [
                      {
                        "handler": "HandleIngestError",
                        "errors": [
                          "States.ALL"
                        ]
                      }
                    ]
                  },
                  {
                    "id": "ValidateData",
                    "type": "Task",
                    "resource": "arn:aws:lambda:af-south-1:123456789012:function:ValidateDataLambda",
                    "next": "IsValid"
                  },
                  {
                    "id": "IsValid",
                    "type": "Choice",
                    "choices": [
                      {
                        "condition": "string_equals",
                        "args": [
                          "$.validationResult",
                          "PASS"
                        ],
                        "next": "Success"
                      },
                      {
                        "condition": "string_equals",
                        "args": [
                          "$.validationResult",
                          "FAIL"
                        ],
                        "next": "HandleValidationError"
                      }
                    ],
                    "default": "HandleValidationError"
                  },
                  {
                    "id": "Success",
                    "type": "Pass",
                    "end": true
                  },
                  {
                    "id": "HandleIngestError",
                    "type": "Pass",
                    "end": true
                  },
                  {
                    "id": "HandleValidationError",
                    "type": "Pass",
                    "end": true
                  }
                ]
              },
              {
                "id": "BenchmarkAndValidate",
                "name": "shieldcraft-staging-benchmark-validate",
                "role_arn": "arn:aws:iam::123456789012:role/ShieldCraftStepFnRole",
                "comment": "Orchestrates BEIR/MTEB benchmarking and model validation (staging: full orchestration)",
                "definition": [
                  {
                    "id": "RunBEIRBenchmark",
                    "type": "Task",
                    "resource": "arn:aws:lambda:af-south-1:123456789012:function:RunBEIRBenchmarkLambda",
                    "next": "RunMTEBBenchmark",
                    "catch": [
                      {
                        "handler": "HandleBenchmarkError",
                        "errors": [
                          "States.ALL"
                        ]
                      }
                    ]
                  },
                  {
                    "id": "RunMTEBBenchmark",
                    "type": "Task",
                    "resource": "arn:aws:lambda:af-south-1:123456789012:function:RunMTEBBenchmarkLambda",
                    "next": "ValidateBenchmarkResults",
                    "catch": [
                      {
                        "handler": "HandleBenchmarkError",
                        "errors": [
                          "States.ALL"
                        ]
                      }
                    ]
                  },
                  {
                    "id": "ValidateBenchmarkResults",
                    "type": "Task",
                    "resource": "arn:aws:lambda:af-south-1:123456789012:function:ValidateBenchmarkResultsLambda",
                    "next": "Success",
                    "catch": [
                      {
                        "handler": "HandleBenchmarkError",
                        "errors": [
                          "States.ALL"
                        ]
                      }
                    ]
                  },
                  {
                    "id": "Success",
                    "type": "Pass",
                    "end": true
                  },
                  {
                    "id": "HandleBenchmarkError",
                    "type": "Pass",
                    "end": true
                  }
                ]
              }
            ]
          },
          "estimated_monthly_cost_usd": 10.0,
          "capability_category": "processing",
          "aws_resources": [
            "AWS::StepFunctions::StateMachine"
          ],
          "dependencies": [
            "iam"
          ],
          "security_features": [
            "iam_roles"
          ]
        },
        "prod": {
          "service_name": "stepfunctions",
          "template_file": "/home/dee/workspace/AI/shieldcraft-ai/proton/stepfunctions-service-template.yaml",
          "environment": "prod",
          "mode": "managed",
          "enabled": true,
          "instance_config": {
            "enabled": true,
            "mode": "managed",
            "state_machines": [
              {
                "id": "DataIngestAndValidate",
                "name": "shieldcraft-prod-data-ingest-validate",
                "role_arn": "arn:aws:iam::123456789012:role/ShieldCraftStepFnRole",
                "comment": "Orchestrates data ingestion, validation, and error handling",
                "definition": [
                  {
                    "id": "IngestData",
                    "type": "Task",
                    "resource": "arn:aws:lambda:af-south-1:123456789012:function:IngestDataLambda",
                    "next": "ValidateData",
                    "catch": [
                      {
                        "handler": "HandleIngestError",
                        "errors": [
                          "States.ALL"
                        ]
                      }
                    ]
                  },
                  {
                    "id": "ValidateData",
                    "type": "Task",
                    "resource": "arn:aws:lambda:af-south-1:123456789012:function:ValidateDataLambda",
                    "next": "IsValid"
                  },
                  {
                    "id": "IsValid",
                    "type": "Choice",
                    "choices": [
                      {
                        "condition": "string_equals",
                        "args": [
                          "$.validationResult",
                          "PASS"
                        ],
                        "next": "Success"
                      },
                      {
                        "condition": "string_equals",
                        "args": [
                          "$.validationResult",
                          "FAIL"
                        ],
                        "next": "HandleValidationError"
                      }
                    ],
                    "default": "HandleValidationError"
                  },
                  {
                    "id": "Success",
                    "type": "Pass",
                    "end": true
                  },
                  {
                    "id": "HandleIngestError",
                    "type": "Pass",
                    "end": true
                  },
                  {
                    "id": "HandleValidationError",
                    "type": "Pass",
                    "end": true
                  }
                ]
              },
              {
                "id": "BenchmarkAndValidate",
                "name": "shieldcraft-prod-benchmark-validate",
                "role_arn": "arn:aws:iam::123456789012:role/ShieldCraftStepFnRole",
                "comment": "Orchestrates BEIR/MTEB benchmarking and model validation (prod: full orchestration)",
                "definition": [
                  {
                    "id": "RunBEIRBenchmark",
                    "type": "Task",
                    "resource": "arn:aws:lambda:af-south-1:123456789012:function:RunBEIRBenchmarkLambda",
                    "next": "RunMTEBBenchmark",
                    "catch": [
                      {
                        "handler": "HandleBenchmarkError",
                        "errors": [
                          "States.ALL"
                        ]
                      }
                    ]
                  },
                  {
                    "id": "RunMTEBBenchmark",
                    "type": "Task",
                    "resource": "arn:aws:lambda:af-south-1:123456789012:function:RunMTEBBenchmarkLambda",
                    "next": "ValidateBenchmarkResults",
                    "catch": [
                      {
                        "handler": "HandleBenchmarkError",
                        "errors": [
                          "States.ALL"
                        ]
                      }
                    ]
                  },
                  {
                    "id": "ValidateBenchmarkResults",
                    "type": "Task",
                    "resource": "arn:aws:lambda:af-south-1:123456789012:function:ValidateBenchmarkResultsLambda",
                    "next": "Success",
                    "catch": [
                      {
                        "handler": "HandleBenchmarkError",
                        "errors": [
                          "States.ALL"
                        ]
                      }
                    ]
                  },
                  {
                    "id": "Success",
                    "type": "Pass",
                    "end": true
                  },
                  {
                    "id": "HandleBenchmarkError",
                    "type": "Pass",
                    "end": true
                  }
                ]
              }
            ]
          },
          "estimated_monthly_cost_usd": 100.0,
          "capability_category": "processing",
          "aws_resources": [
            "AWS::StepFunctions::StateMachine"
          ],
          "dependencies": [
            "iam"
          ],
          "security_features": [
            "iam_roles"
          ]
        }
      },
      "service_progression": {
        "dev": "Managed deployment for dev environment",
        "staging": "Managed deployment for staging environment",
        "prod": "Managed deployment for prod environment"
      },
      "cost_progression": {
        "dev": 1.5,
        "staging": 15.0,
        "prod": 150.0
      },
      "active_services_by_env": {
        "dev": [
          "stepfunctions",
          "eventbridge"
        ],
        "staging": [
          "stepfunctions",
          "eventbridge"
        ],
        "prod": [
          "stepfunctions",
          "eventbridge"
        ]
      },
      "per_service_costs_by_env": {
        "dev": {
          "stepfunctions": 1.0,
          "eventbridge": 0.5
        },
        "staging": {
          "stepfunctions": 10.0,
          "eventbridge": 5.0
        },
        "prod": {
          "stepfunctions": 100.0,
          "eventbridge": 50.0
        }
      },
      "proof_links": [
        {
          "label": "Dev Configuration",
          "href": "/config/dev.yml",
          "kind": "code"
        },
        {
          "label": "Staging Configuration",
          "href": "/config/staging.yml",
          "kind": "code"
        },
        {
          "label": "Prod Configuration",
          "href": "/config/prod.yml",
          "kind": "code"
        },
        {
          "label": "Stepfunctions Template",
          "href": "/proton/stepfunctions-service-template.yaml",
          "kind": "code"
        },
        {
          "label": "Eventbridge Template",
          "href": "/proton/eventbridge-service-template.yaml",
          "kind": "code"
        }
      ]
    },
    "security": {
      "capability_id": "security",
      "capability_name": "Security & Identity Governance",
      "description": "Zero-trust security posture with comprehensive identity management",
      "category": "guardrails",
      "environments": {
        "dev": {
          "service_name": "iam",
          "template_file": "/home/dee/workspace/AI/shieldcraft-ai/proton/iam-service-template.yaml",
          "environment": "dev",
          "mode": "managed",
          "enabled": true,
          "instance_config": {
            "enabled": true,
            "mode": "managed"
          },
          "estimated_monthly_cost_usd": 0.0,
          "capability_category": "security",
          "aws_resources": [
            "AWS::IAM::Role",
            "AWS::IAM::Policy"
          ],
          "dependencies": [],
          "security_features": [
            "iam_roles",
            "iam_policies"
          ]
        },
        "staging": {
          "service_name": "iam",
          "template_file": "/home/dee/workspace/AI/shieldcraft-ai/proton/iam-service-template.yaml",
          "environment": "staging",
          "mode": "managed",
          "enabled": true,
          "instance_config": {
            "enabled": true,
            "mode": "managed"
          },
          "estimated_monthly_cost_usd": 0.0,
          "capability_category": "security",
          "aws_resources": [
            "AWS::IAM::Role",
            "AWS::IAM::Policy"
          ],
          "dependencies": [],
          "security_features": [
            "iam_roles",
            "iam_policies"
          ]
        },
        "prod": {
          "service_name": "iam",
          "template_file": "/home/dee/workspace/AI/shieldcraft-ai/proton/iam-service-template.yaml",
          "environment": "prod",
          "mode": "managed",
          "enabled": true,
          "instance_config": {
            "enabled": true,
            "mode": "managed"
          },
          "estimated_monthly_cost_usd": 0.0,
          "capability_category": "security",
          "aws_resources": [
            "AWS::IAM::Role",
            "AWS::IAM::Policy"
          ],
          "dependencies": [],
          "security_features": [
            "iam_roles",
            "iam_policies"
          ]
        }
      },
      "service_progression": {
        "dev": "Managed deployment for dev environment",
        "staging": "Managed deployment for staging environment",
        "prod": "Managed deployment for prod environment"
      },
      "cost_progression": {
        "dev": 7.5,
        "staging": 40.0,
        "prod": 300.0
      },
      "active_services_by_env": {
        "dev": [
          "iam",
          "security",
          "cloud_native_hardening"
        ],
        "staging": [
          "iam",
          "security",
          "cloud_native_hardening"
        ],
        "prod": [
          "iam",
          "security",
          "cloud_native_hardening"
        ]
      },
      "per_service_costs_by_env": {
        "dev": {
          "iam": 0.0,
          "security": 5.0,
          "cloud_native_hardening": 2.5
        },
        "staging": {
          "iam": 0.0,
          "security": 25.0,
          "cloud_native_hardening": 15.0
        },
        "prod": {
          "iam": 0.0,
          "security": 200.0,
          "cloud_native_hardening": 100.0
        }
      },
      "proof_links": [
        {
          "label": "Dev Configuration",
          "href": "/config/dev.yml",
          "kind": "code"
        },
        {
          "label": "Staging Configuration",
          "href": "/config/staging.yml",
          "kind": "code"
        },
        {
          "label": "Prod Configuration",
          "href": "/config/prod.yml",
          "kind": "code"
        },
        {
          "label": "Iam Template",
          "href": "/proton/iam-service-template.yaml",
          "kind": "code"
        },
        {
          "label": "Security Template",
          "href": "/proton/security-service-template.yaml",
          "kind": "code"
        },
        {
          "label": "Secrets_Manager Template",
          "href": "/proton/secrets_manager-service-template.yaml",
          "kind": "code"
        },
        {
          "label": "Cloud_Native_Hardening Template",
          "href": "/proton/cloud_native_hardening-service-template.yaml",
          "kind": "code"
        }
      ]
    },
    "governance": {
      "capability_id": "governance",
      "capability_name": "Compliance & Cost Governance",
      "description": "Automated compliance checking with proactive cost management",
      "category": "guardrails",
      "environments": {},
      "service_progression": {},
      "cost_progression": {},
      "active_services_by_env": {},
      "per_service_costs_by_env": {},
      "proof_links": [
        {
          "label": "Dev Configuration",
          "href": "/config/dev.yml",
          "kind": "code"
        },
        {
          "label": "Staging Configuration",
          "href": "/config/staging.yml",
          "kind": "code"
        },
        {
          "label": "Prod Configuration",
          "href": "/config/prod.yml",
          "kind": "code"
        },
        {
          "label": "Compliance Template",
          "href": "/proton/compliance-service-template.yaml",
          "kind": "code"
        },
        {
          "label": "Budget Template",
          "href": "/proton/budget-service-template.yaml",
          "kind": "code"
        },
        {
          "label": "Controltower Template",
          "href": "/proton/controltower-service-template.yaml",
          "kind": "code"
        }
      ]
    },
    "observability": {
      "capability_id": "observability",
      "capability_name": "Monitoring & Attack Simulation",
      "description": "Comprehensive observability with proactive threat simulation",
      "category": "observability",
      "environments": {
        "dev": {
          "service_name": "cloud_native_hardening",
          "template_file": "/home/dee/workspace/AI/shieldcraft-ai/proton/cloud_native_hardening-service-template.yaml",
          "environment": "dev",
          "mode": "managed",
          "enabled": true,
          "instance_config": {
            "enabled": true,
            "mode": "managed",
            "enable_cloudwatch_alarms": true,
            "alarm_email": "devops@shieldcraft.ai",
            "config_rules": [
              "s3-bucket-public-read-prohibited",
              "iam-user-no-policies-check"
            ]
          },
          "estimated_monthly_cost_usd": 2.5,
          "capability_category": "security",
          "aws_resources": [
            "AWS::Config::ConfigRule",
            "AWS::IAM::ManagedPolicy",
            "AWS::SecretsManager::Secret"
          ],
          "dependencies": [
            "s3",
            "iam"
          ],
          "security_features": [
            "iam_roles",
            "secrets_management",
            "iam_policies"
          ]
        },
        "staging": {
          "service_name": "cloud_native_hardening",
          "template_file": "/home/dee/workspace/AI/shieldcraft-ai/proton/cloud_native_hardening-service-template.yaml",
          "environment": "staging",
          "mode": "managed",
          "enabled": true,
          "instance_config": {
            "enabled": true,
            "mode": "managed",
            "enable_cloudwatch_alarms": true,
            "alarm_email": "devops@shieldcraft.ai",
            "config_rules": [
              "s3-bucket-public-read-prohibited",
              "iam-user-no-policies-check"
            ]
          },
          "estimated_monthly_cost_usd": 15.0,
          "capability_category": "security",
          "aws_resources": [
            "AWS::Config::ConfigRule",
            "AWS::IAM::ManagedPolicy",
            "AWS::SecretsManager::Secret"
          ],
          "dependencies": [
            "s3",
            "iam"
          ],
          "security_features": [
            "iam_roles",
            "secrets_management",
            "iam_policies"
          ]
        },
        "prod": {
          "service_name": "cloud_native_hardening",
          "template_file": "/home/dee/workspace/AI/shieldcraft-ai/proton/cloud_native_hardening-service-template.yaml",
          "environment": "prod",
          "mode": "managed",
          "enabled": true,
          "instance_config": {
            "enabled": true,
            "mode": "managed",
            "enable_cloudwatch_alarms": true,
            "alarm_email": "ops@shieldcraft.ai",
            "config_rules": [
              "s3-bucket-public-read-prohibited",
              "iam-user-no-policies-check"
            ]
          },
          "estimated_monthly_cost_usd": 100.0,
          "capability_category": "security",
          "aws_resources": [
            "AWS::Config::ConfigRule",
            "AWS::IAM::ManagedPolicy",
            "AWS::SecretsManager::Secret"
          ],
          "dependencies": [
            "s3",
            "iam"
          ],
          "security_features": [
            "iam_roles",
            "secrets_management",
            "iam_policies"
          ]
        }
      },
      "service_progression": {
        "dev": "Managed deployment for dev environment",
        "staging": "Managed deployment for staging environment",
        "prod": "Managed deployment for prod environment"
      },
      "cost_progression": {
        "dev": 2.5,
        "staging": 15.0,
        "prod": 100.0
      },
      "active_services_by_env": {
        "dev": [
          "cloud_native_hardening"
        ],
        "staging": [
          "cloud_native_hardening"
        ],
        "prod": [
          "cloud_native_hardening"
        ]
      },
      "per_service_costs_by_env": {
        "dev": {
          "cloud_native_hardening": 2.5
        },
        "staging": {
          "cloud_native_hardening": 15.0
        },
        "prod": {
          "cloud_native_hardening": 100.0
        }
      },
      "proof_links": [
        {
          "label": "Dev Configuration",
          "href": "/config/dev.yml",
          "kind": "code"
        },
        {
          "label": "Staging Configuration",
          "href": "/config/staging.yml",
          "kind": "code"
        },
        {
          "label": "Prod Configuration",
          "href": "/config/prod.yml",
          "kind": "code"
        },
        {
          "label": "Attack_Simulation Template",
          "href": "/proton/attack_simulation-service-template.yaml",
          "kind": "code"
        },
        {
          "label": "Cloud_Native_Hardening Template",
          "href": "/proton/cloud_native_hardening-service-template.yaml",
          "kind": "code"
        }
      ]
    }
  },
  "service_matrix": {
    "eventbridge": {
      "dev": {
        "service_name": "eventbridge",
        "template_file": "/home/dee/workspace/AI/shieldcraft-ai/proton/eventbridge-service-template.yaml",
        "environment": "dev",
        "mode": "managed",
        "enabled": true,
        "instance_config": {
          "enabled": true,
          "mode": "managed",
          "data_bus_name": "shieldcraft-dev-data-bus",
          "security_bus_name": "shieldcraft-dev-security-bus",
          "lambda_export_name": "DevMskTopicCreatorLambdaArn",
          "data_event_source": "shieldcraft.data.dev"
        },
        "estimated_monthly_cost_usd": 0.5,
        "capability_category": "ingestion",
        "aws_resources": [
          "AWS::Events::EventBus",
          "AWS::Events::Rule"
        ],
        "dependencies": [],
        "security_features": []
      },
      "staging": {
        "service_name": "eventbridge",
        "template_file": "/home/dee/workspace/AI/shieldcraft-ai/proton/eventbridge-service-template.yaml",
        "environment": "staging",
        "mode": "managed",
        "enabled": true,
        "instance_config": {
          "enabled": true,
          "mode": "managed",
          "data_bus_name": "shieldcraft-staging-data-bus",
          "security_bus_name": "shieldcraft-staging-security-bus",
          "lambda_export_name": "StagingMskTopicCreatorLambdaArn",
          "data_event_source": "shieldcraft.data.staging"
        },
        "estimated_monthly_cost_usd": 5.0,
        "capability_category": "ingestion",
        "aws_resources": [
          "AWS::Events::EventBus",
          "AWS::Events::Rule"
        ],
        "dependencies": [],
        "security_features": []
      },
      "prod": {
        "service_name": "eventbridge",
        "template_file": "/home/dee/workspace/AI/shieldcraft-ai/proton/eventbridge-service-template.yaml",
        "environment": "prod",
        "mode": "managed",
        "enabled": true,
        "instance_config": {
          "enabled": true,
          "mode": "managed",
          "data_bus_name": "shieldcraft-prod-data-bus",
          "security_bus_name": "shieldcraft-prod-security-bus",
          "lambda_export_name": "ProdMskTopicCreatorLambdaArn",
          "data_event_source": "shieldcraft.data.prod"
        },
        "estimated_monthly_cost_usd": 50.0,
        "capability_category": "ingestion",
        "aws_resources": [
          "AWS::Events::EventBus",
          "AWS::Events::Rule"
        ],
        "dependencies": [],
        "security_features": []
      }
    },
    "cloud_native_hardening": {
      "dev": {
        "service_name": "cloud_native_hardening",
        "template_file": "/home/dee/workspace/AI/shieldcraft-ai/proton/cloud_native_hardening-service-template.yaml",
        "environment": "dev",
        "mode": "managed",
        "enabled": true,
        "instance_config": {
          "enabled": true,
          "mode": "managed",
          "enable_cloudwatch_alarms": true,
          "alarm_email": "devops@shieldcraft.ai",
          "config_rules": [
            "s3-bucket-public-read-prohibited",
            "iam-user-no-policies-check"
          ]
        },
        "estimated_monthly_cost_usd": 2.5,
        "capability_category": "security",
        "aws_resources": [
          "AWS::Config::ConfigRule",
          "AWS::IAM::ManagedPolicy",
          "AWS::SecretsManager::Secret"
        ],
        "dependencies": [
          "s3",
          "iam"
        ],
        "security_features": [
          "iam_roles",
          "secrets_management",
          "iam_policies"
        ]
      },
      "staging": {
        "service_name": "cloud_native_hardening",
        "template_file": "/home/dee/workspace/AI/shieldcraft-ai/proton/cloud_native_hardening-service-template.yaml",
        "environment": "staging",
        "mode": "managed",
        "enabled": true,
        "instance_config": {
          "enabled": true,
          "mode": "managed",
          "enable_cloudwatch_alarms": true,
          "alarm_email": "devops@shieldcraft.ai",
          "config_rules": [
            "s3-bucket-public-read-prohibited",
            "iam-user-no-policies-check"
          ]
        },
        "estimated_monthly_cost_usd": 15.0,
        "capability_category": "security",
        "aws_resources": [
          "AWS::Config::ConfigRule",
          "AWS::IAM::ManagedPolicy",
          "AWS::SecretsManager::Secret"
        ],
        "dependencies": [
          "s3",
          "iam"
        ],
        "security_features": [
          "iam_roles",
          "secrets_management",
          "iam_policies"
        ]
      },
      "prod": {
        "service_name": "cloud_native_hardening",
        "template_file": "/home/dee/workspace/AI/shieldcraft-ai/proton/cloud_native_hardening-service-template.yaml",
        "environment": "prod",
        "mode": "managed",
        "enabled": true,
        "instance_config": {
          "enabled": true,
          "mode": "managed",
          "enable_cloudwatch_alarms": true,
          "alarm_email": "ops@shieldcraft.ai",
          "config_rules": [
            "s3-bucket-public-read-prohibited",
            "iam-user-no-policies-check"
          ]
        },
        "estimated_monthly_cost_usd": 100.0,
        "capability_category": "security",
        "aws_resources": [
          "AWS::Config::ConfigRule",
          "AWS::IAM::ManagedPolicy",
          "AWS::SecretsManager::Secret"
        ],
        "dependencies": [
          "s3",
          "iam"
        ],
        "security_features": [
          "iam_roles",
          "secrets_management",
          "iam_policies"
        ]
      }
    },
    "sagemaker": {
      "dev": {
        "service_name": "sagemaker",
        "template_file": "/home/dee/workspace/AI/shieldcraft-ai/proton/sagemaker-service-template.yaml",
        "environment": "dev",
        "mode": "local",
        "enabled": true,
        "instance_config": {
          "enabled": true,
          "mode": "local",
          "training_instance_type": "ml.t3.medium",
          "inference_instance_type": "ml.t3.medium",
          "endpoint_auto_scaling": false,
          "model_registry": "shieldcraft-model-registry-dev"
        },
        "estimated_monthly_cost_usd": 0.0,
        "capability_category": "ml",
        "aws_resources": [
          "AWS::SageMaker::Model",
          "AWS::SageMaker::EndpointConfig",
          "AWS::SageMaker::Endpoint"
        ],
        "dependencies": [],
        "security_features": []
      },
      "staging": {
        "service_name": "sagemaker",
        "template_file": "/home/dee/workspace/AI/shieldcraft-ai/proton/sagemaker-service-template.yaml",
        "environment": "staging",
        "mode": "managed",
        "enabled": true,
        "instance_config": {
          "enabled": true,
          "mode": "managed",
          "training_instance_type": "ml.m5.xlarge",
          "inference_instance_type": "ml.m5.large",
          "endpoint_auto_scaling": true,
          "model_registry": "shieldcraft-model-registry-staging"
        },
        "estimated_monthly_cost_usd": 89.55,
        "capability_category": "ml",
        "aws_resources": [
          "AWS::SageMaker::Model",
          "AWS::SageMaker::EndpointConfig",
          "AWS::SageMaker::Endpoint"
        ],
        "dependencies": [],
        "security_features": []
      },
      "prod": {
        "service_name": "sagemaker",
        "template_file": "/home/dee/workspace/AI/shieldcraft-ai/proton/sagemaker-service-template.yaml",
        "environment": "prod",
        "mode": "managed",
        "enabled": true,
        "instance_config": {
          "enabled": true,
          "mode": "managed",
          "training_instance_type": "ml.m5.2xlarge",
          "inference_instance_type": "ml.m5.xlarge",
          "endpoint_auto_scaling": true,
          "model_registry": "shieldcraft-model-registry-prod",
          "multi_az_deployment": true,
          "data_capture_enabled": true,
          "model_monitoring_enabled": true
        },
        "estimated_monthly_cost_usd": 805.2,
        "capability_category": "ml",
        "aws_resources": [
          "AWS::SageMaker::Model",
          "AWS::SageMaker::EndpointConfig",
          "AWS::SageMaker::Endpoint"
        ],
        "dependencies": [],
        "security_features": []
      }
    },
    "lakeformation": {
      "dev": {
        "service_name": "lakeformation",
        "template_file": "/home/dee/workspace/AI/shieldcraft-ai/proton/lakeformation-service-template.yaml",
        "environment": "dev",
        "mode": "managed",
        "enabled": true,
        "instance_config": {
          "enabled": true,
          "mode": "managed",
          "admin_role": "ShieldCraftLakeAdmin",
          "data_lake_location": "s3://shieldcraft-dev-analytics",
          "buckets": [
            {
              "id": "AnalyticsDataBucket",
              "name": "shieldcraft-dev-analytics"
            },
            {
              "id": "RawDataBucket",
              "name": "shieldcraft-dev-raw"
            },
            {
              "id": "ProcessedDataBucket",
              "name": "shieldcraft-dev-processed"
            }
          ],
          "permissions": [
            {
              "template": "etl",
              "principal": "GLUE_EXECUTION_ROLE_ARN",
              "resource_type": "table",
              "resource": {
                "databaseName": "shieldcraft_dev_db",
                "tableName": "raw_data"
              }
            },
            {
              "template": "admin",
              "principal": "LAKEFORMATION_ADMIN_ROLE_ARN",
              "resource_type": "database",
              "resource": {
                "databaseName": "shieldcraft_dev_db"
              }
            },
            {
              "principal": "SAGEMAKER_EXECUTION_ROLE_ARN",
              "resource_type": "bucket",
              "resource": {
                "arn": "arn:aws:s3:::shieldcraft-dev-analytics"
              },
              "actions": [
                "DATA_LOCATION_ACCESS"
              ]
            }
          ]
        },
        "estimated_monthly_cost_usd": 0.0,
        "capability_category": "governance",
        "aws_resources": [
          "AWS::LakeFormation::DataLakeSettings",
          "AWS::LakeFormation::Resource",
          "AWS::Glue::Database"
        ],
        "dependencies": [
          "s3",
          "iam"
        ],
        "security_features": [
          "iam_roles"
        ]
      },
      "staging": {
        "service_name": "lakeformation",
        "template_file": "/home/dee/workspace/AI/shieldcraft-ai/proton/lakeformation-service-template.yaml",
        "environment": "staging",
        "mode": "managed",
        "enabled": true,
        "instance_config": {
          "enabled": true,
          "mode": "managed",
          "admin_role": "ShieldCraftLakeAdmin",
          "data_lake_location": "s3://shieldcraft-staging-analytics",
          "buckets": [
            {
              "id": "AnalyticsDataBucket",
              "name": "shieldcraft-staging-analytics"
            },
            {
              "id": "RawDataBucket",
              "name": "shieldcraft-staging-raw"
            },
            {
              "id": "ProcessedDataBucket",
              "name": "shieldcraft-staging-processed"
            }
          ],
          "permissions": [
            {
              "template": "etl",
              "principal": "GLUE_EXECUTION_ROLE_ARN",
              "resource_type": "table",
              "resource": {
                "databaseName": "shieldcraft_staging_db",
                "tableName": "raw_data"
              }
            },
            {
              "template": "admin",
              "principal": "LAKEFORMATION_ADMIN_ROLE_ARN",
              "resource_type": "database",
              "resource": {
                "databaseName": "shieldcraft_staging_db"
              }
            },
            {
              "principal": "SAGEMAKER_EXECUTION_ROLE_ARN",
              "resource_type": "bucket",
              "resource": {
                "arn": "arn:aws:s3:::shieldcraft-staging-analytics"
              },
              "actions": [
                "DATA_LOCATION_ACCESS"
              ]
            }
          ]
        },
        "estimated_monthly_cost_usd": 5.0,
        "capability_category": "governance",
        "aws_resources": [
          "AWS::LakeFormation::DataLakeSettings",
          "AWS::LakeFormation::Resource",
          "AWS::Glue::Database"
        ],
        "dependencies": [
          "s3",
          "iam"
        ],
        "security_features": [
          "iam_roles"
        ]
      },
      "prod": {
        "service_name": "lakeformation",
        "template_file": "/home/dee/workspace/AI/shieldcraft-ai/proton/lakeformation-service-template.yaml",
        "environment": "prod",
        "mode": "managed",
        "enabled": true,
        "instance_config": {
          "enabled": true,
          "mode": "managed",
          "admin_role": "ShieldCraftLakeAdmin",
          "data_lake_location": "s3://shieldcraft-prod-analytics",
          "buckets": [
            {
              "id": "AnalyticsDataBucket",
              "name": "shieldcraft-prod-analytics"
            },
            {
              "id": "RawDataBucket",
              "name": "shieldcraft-prod-raw"
            },
            {
              "id": "ProcessedDataBucket",
              "name": "shieldcraft-prod-processed"
            }
          ],
          "permissions": [
            {
              "template": "etl",
              "principal": "GLUE_EXECUTION_ROLE_ARN",
              "resource_type": "table",
              "resource": {
                "databaseName": "shieldcraft_prod_db",
                "tableName": "raw_data"
              }
            },
            {
              "template": "admin",
              "principal": "LAKEFORMATION_ADMIN_ROLE_ARN",
              "resource_type": "database",
              "resource": {
                "databaseName": "shieldcraft_prod_db"
              }
            },
            {
              "principal": "SAGEMAKER_EXECUTION_ROLE_ARN",
              "resource_type": "bucket",
              "resource": {
                "arn": "arn:aws:s3:::shieldcraft-prod-analytics"
              },
              "actions": [
                "DATA_LOCATION_ACCESS"
              ]
            }
          ]
        },
        "estimated_monthly_cost_usd": 50.0,
        "capability_category": "governance",
        "aws_resources": [
          "AWS::LakeFormation::DataLakeSettings",
          "AWS::LakeFormation::Resource",
          "AWS::Glue::Database"
        ],
        "dependencies": [
          "s3",
          "iam"
        ],
        "security_features": [
          "iam_roles"
        ]
      }
    },
    "security": {
      "dev": {
        "service_name": "security",
        "template_file": "/home/dee/workspace/AI/shieldcraft-ai/proton/security-service-template.yaml",
        "environment": "dev",
        "mode": "managed",
        "enabled": true,
        "instance_config": {
          "enabled": true,
          "mode": "managed"
        },
        "estimated_monthly_cost_usd": 5.0,
        "capability_category": "security",
        "aws_resources": [
          "AWS::Logs::LogGroup",
          "AWS::CloudWatch::Alarm",
          "AWS::GuardDuty::Detector"
        ],
        "dependencies": [],
        "security_features": [
          "security_groups"
        ]
      },
      "staging": {
        "service_name": "security",
        "template_file": "/home/dee/workspace/AI/shieldcraft-ai/proton/security-service-template.yaml",
        "environment": "staging",
        "mode": "managed",
        "enabled": true,
        "instance_config": {
          "enabled": true,
          "mode": "managed"
        },
        "estimated_monthly_cost_usd": 25.0,
        "capability_category": "security",
        "aws_resources": [
          "AWS::Logs::LogGroup",
          "AWS::CloudWatch::Alarm",
          "AWS::GuardDuty::Detector"
        ],
        "dependencies": [],
        "security_features": [
          "security_groups"
        ]
      },
      "prod": {
        "service_name": "security",
        "template_file": "/home/dee/workspace/AI/shieldcraft-ai/proton/security-service-template.yaml",
        "environment": "prod",
        "mode": "managed",
        "enabled": true,
        "instance_config": {
          "enabled": true,
          "mode": "managed"
        },
        "estimated_monthly_cost_usd": 200.0,
        "capability_category": "security",
        "aws_resources": [
          "AWS::Logs::LogGroup",
          "AWS::CloudWatch::Alarm",
          "AWS::GuardDuty::Detector"
        ],
        "dependencies": [],
        "security_features": [
          "security_groups"
        ]
      }
    },
    "opensearch": {
      "dev": {
        "service_name": "opensearch",
        "template_file": "/home/dee/workspace/AI/shieldcraft-ai/proton/opensearch-service-template.yaml",
        "environment": "dev",
        "mode": "none",
        "enabled": true,
        "instance_config": {
          "enabled": true,
          "mode": "none",
          "provision": false,
          "security_group": {
            "id": "OpenSearchSecurityGroup",
            "description": "Security group for OpenSearch",
            "allow_all_outbound": true
          },
          "domain": {
            "id": "ShieldCraftOpenSearchDomain",
            "name": "shieldcraft-opensearch-dev",
            "engine_version": "OpenSearch_2.11",
            "cluster_config": {
              "instanceType": "m6g.large.search",
              "instanceCount": 2
            },
            "node_to_node_encryption_options": {
              "enabled": true
            },
            "encryption_at_rest_options": {
              "enabled": true
            },
            "ebs_options": {
              "ebsEnabled": true,
              "volumeSize": 20,
              "volumeType": "gp3"
            }
          }
        },
        "estimated_monthly_cost_usd": 0.0,
        "capability_category": "storage",
        "aws_resources": [
          "AWS::OpenSearchService::Domain"
        ],
        "dependencies": [],
        "security_features": [
          "encryption",
          "secrets_management"
        ]
      },
      "staging": {
        "service_name": "opensearch",
        "template_file": "/home/dee/workspace/AI/shieldcraft-ai/proton/opensearch-service-template.yaml",
        "environment": "staging",
        "mode": "managed",
        "enabled": true,
        "instance_config": {
          "enabled": true,
          "mode": "managed",
          "security_group": {
            "id": "OpenSearchSecurityGroup",
            "description": "Security group for OpenSearch",
            "allow_all_outbound": true
          },
          "domain": {
            "id": "ShieldCraftOpenSearchDomain",
            "name": "shieldcraft-opensearch-staging",
            "engine_version": "OpenSearch_2.11",
            "cluster_config": {
              "instanceType": "t3.small.search",
              "instanceCount": 2
            },
            "node_to_node_encryption_options": {
              "enabled": true
            },
            "encryption_at_rest_options": {
              "enabled": true
            },
            "ebs_options": {
              "ebsEnabled": true,
              "volumeSize": 20,
              "volumeType": "gp3"
            }
          }
        },
        "estimated_monthly_cost_usd": 61.6,
        "capability_category": "storage",
        "aws_resources": [
          "AWS::OpenSearchService::Domain"
        ],
        "dependencies": [],
        "security_features": [
          "encryption",
          "secrets_management"
        ]
      },
      "prod": {
        "service_name": "opensearch",
        "template_file": "/home/dee/workspace/AI/shieldcraft-ai/proton/opensearch-service-template.yaml",
        "environment": "prod",
        "mode": "managed",
        "enabled": true,
        "instance_config": {
          "enabled": true,
          "mode": "managed",
          "security_group": {
            "id": "OpenSearchSecurityGroup",
            "description": "Security group for OpenSearch",
            "allow_all_outbound": true
          },
          "domain": {
            "id": "ShieldCraftOpenSearchDomain",
            "name": "shieldcraft-opensearch-prod",
            "engine_version": "OpenSearch_2.11",
            "cluster_config": {
              "instanceType": "r6g.large.search",
              "instanceCount": 3
            },
            "node_to_node_encryption_options": {
              "enabled": true
            },
            "encryption_at_rest_options": {
              "enabled": true
            },
            "ebs_options": {
              "ebsEnabled": true,
              "volumeSize": 20,
              "volumeType": "gp3"
            }
          }
        },
        "estimated_monthly_cost_usd": 938.91,
        "capability_category": "storage",
        "aws_resources": [
          "AWS::OpenSearchService::Domain"
        ],
        "dependencies": [],
        "security_features": [
          "encryption",
          "secrets_management"
        ]
      }
    },
    "airbyte": {
      "dev": {
        "service_name": "airbyte",
        "template_file": "/home/dee/workspace/AI/shieldcraft-ai/proton/airbyte-service-template.yaml",
        "environment": "dev",
        "mode": "ecs_scale_to_zero",
        "enabled": true,
        "instance_config": {
          "enabled": true,
          "mode": "ecs_scale_to_zero",
          "deployment_type": "ecs",
          "min_task_count": 1,
          "max_task_count": 3
        },
        "estimated_monthly_cost_usd": 0.0,
        "capability_category": "ingestion",
        "aws_resources": [
          "AWS::ECS::Service"
        ],
        "dependencies": [],
        "security_features": [
          "secrets_management"
        ]
      },
      "staging": {
        "service_name": "airbyte",
        "template_file": "/home/dee/workspace/AI/shieldcraft-ai/proton/airbyte-service-template.yaml",
        "environment": "staging",
        "mode": "ecs_managed",
        "enabled": true,
        "instance_config": {
          "enabled": true,
          "mode": "ecs_managed",
          "deployment_type": "ecs",
          "min_task_count": 1,
          "max_task_count": 3
        },
        "estimated_monthly_cost_usd": 120.0,
        "capability_category": "ingestion",
        "aws_resources": [
          "AWS::ECS::Service"
        ],
        "dependencies": [],
        "security_features": [
          "secrets_management"
        ]
      },
      "prod": {
        "service_name": "airbyte",
        "template_file": "/home/dee/workspace/AI/shieldcraft-ai/proton/airbyte-service-template.yaml",
        "environment": "prod",
        "mode": "ecs_managed",
        "enabled": true,
        "instance_config": {
          "enabled": true,
          "mode": "ecs_managed",
          "deployment_type": "ecs",
          "min_task_count": 2,
          "max_task_count": 6
        },
        "estimated_monthly_cost_usd": 360.0,
        "capability_category": "ingestion",
        "aws_resources": [
          "AWS::ECS::Service"
        ],
        "dependencies": [],
        "security_features": [
          "secrets_management"
        ]
      }
    },
    "lambda": {
      "dev": {
        "service_name": "lambda",
        "template_file": "/home/dee/workspace/AI/shieldcraft-ai/proton/lambda-service-template.yaml",
        "environment": "dev",
        "mode": "managed",
        "enabled": true,
        "instance_config": {
          "enabled": true,
          "mode": "managed",
          "functions": [
            {
              "id": "MskTopicCreator",
              "description": "Lambda to create Kafka topics after MSK cluster is ready",
              "handler": "msk_topic_creator.lambda_handler",
              "runtime": "python{{ PYTHON_VERSION }}",
              "memory_size": 256,
              "timeout": 60,
              "environment": {
                "MSK_CLUSTER_NAME": "shieldcraft-msk-cluster",
                "TOPICS": [
                  {
                    "name": "events-ingest",
                    "partitions": 3,
                    "replication_factor": 2
                  },
                  {
                    "name": "audit-log",
                    "partitions": 2,
                    "replication_factor": 2
                  }
                ]
              },
              "vpc_subnet_ids": [
                "subnet-priv-a",
                "subnet-priv-b"
              ],
              "security_group_ids": [
                "sg-lambda"
              ],
              "policies": [
                "kafka:DescribeCluster",
                "kafka:GetBootstrapBrokers",
                "kafka:CreateTopic",
                "kafka:ListTopics",
                "kafka:DescribeTopic"
              ]
            }
          ]
        },
        "estimated_monthly_cost_usd": 2.5,
        "capability_category": "processing",
        "aws_resources": [
          "AWS::Lambda::Function"
        ],
        "dependencies": [
          "networking"
        ],
        "security_features": [
          "iam_roles",
          "vpc_networking",
          "security_groups"
        ]
      },
      "staging": {
        "service_name": "lambda",
        "template_file": "/home/dee/workspace/AI/shieldcraft-ai/proton/lambda-service-template.yaml",
        "environment": "staging",
        "mode": "managed",
        "enabled": true,
        "instance_config": {
          "enabled": true,
          "mode": "managed",
          "functions": [
            {
              "id": "MskTopicCreator",
              "description": "Lambda to create Kafka topics after MSK cluster is ready",
              "handler": "msk_topic_creator.lambda_handler",
              "runtime": "python{{ PYTHON_VERSION }}",
              "memory_size": 256,
              "timeout": 60,
              "environment": {
                "MSK_CLUSTER_NAME": "shieldcraft-msk-cluster-staging",
                "TOPICS": [
                  {
                    "name": "events-ingest",
                    "partitions": 3,
                    "replication_factor": 2
                  },
                  {
                    "name": "audit-log",
                    "partitions": 2,
                    "replication_factor": 2
                  }
                ]
              },
              "vpc_subnet_ids": [
                "subnet-priv-a",
                "subnet-priv-b"
              ],
              "security_group_ids": [
                "sg-lambda"
              ],
              "policies": [
                "kafka:DescribeCluster",
                "kafka:GetBootstrapBrokers",
                "kafka:CreateTopic",
                "kafka:ListTopics",
                "kafka:DescribeTopic"
              ]
            }
          ]
        },
        "estimated_monthly_cost_usd": 25.0,
        "capability_category": "processing",
        "aws_resources": [
          "AWS::Lambda::Function"
        ],
        "dependencies": [
          "networking"
        ],
        "security_features": [
          "iam_roles",
          "vpc_networking",
          "security_groups"
        ]
      },
      "prod": {
        "service_name": "lambda",
        "template_file": "/home/dee/workspace/AI/shieldcraft-ai/proton/lambda-service-template.yaml",
        "environment": "prod",
        "mode": "managed",
        "enabled": true,
        "instance_config": {
          "enabled": true,
          "mode": "managed",
          "functions": [
            {
              "id": "MskTopicCreator",
              "description": "Lambda to create Kafka topics after MSK cluster is ready",
              "handler": "msk_topic_creator.lambda_handler",
              "runtime": "python{{ PYTHON_VERSION }}",
              "memory_size": 512,
              "timeout": 120,
              "environment": {
                "MSK_CLUSTER_NAME": "shieldcraft-msk-cluster-prod",
                "TOPICS": [
                  {
                    "name": "events-ingest",
                    "partitions": 6,
                    "replication_factor": 3
                  },
                  {
                    "name": "audit-log",
                    "partitions": 3,
                    "replication_factor": 3
                  }
                ]
              },
              "vpc_subnet_ids": [
                "subnet-priv-a",
                "subnet-priv-b",
                "subnet-priv-c"
              ],
              "security_group_ids": [
                "sg-lambda"
              ],
              "policies": [
                "kafka:DescribeCluster",
                "kafka:GetBootstrapBrokers",
                "kafka:CreateTopic",
                "kafka:ListTopics",
                "kafka:DescribeTopic"
              ]
            }
          ]
        },
        "estimated_monthly_cost_usd": 200.0,
        "capability_category": "processing",
        "aws_resources": [
          "AWS::Lambda::Function"
        ],
        "dependencies": [
          "networking"
        ],
        "security_features": [
          "iam_roles",
          "vpc_networking",
          "security_groups"
        ]
      }
    },
    "networking": {
      "dev": {
        "service_name": "networking",
        "template_file": "/home/dee/workspace/AI/shieldcraft-ai/proton/networking-environment-template.yaml",
        "environment": "dev",
        "mode": "managed",
        "enabled": true,
        "instance_config": {
          "enabled": true,
          "mode": "managed",
          "vpc_id": "vpc-shieldcraft-dev",
          "cidr": "10.0.0.0/16",
          "subnets": [
            {
              "id": "subnet-pub-a",
              "cidr": "10.0.10.0/24",
              "type": "PUBLIC"
            },
            {
              "id": "subnet-priv-a",
              "cidr": "10.0.1.0/24",
              "type": "PRIVATE"
            },
            {
              "id": "subnet-priv-b",
              "cidr": "10.0.2.0/24",
              "type": "PRIVATE"
            }
          ],
          "security_groups": [
            {
              "id": "sg-msk",
              "description": "Security group for MSK brokers",
              "allow_all_outbound": true
            },
            {
              "id": "sg-lambda",
              "description": "Security group for Lambda functions",
              "allow_all_outbound": true
            },
            {
              "id": "sg-default",
              "description": "Default security group for ShieldCraft dev VPC",
              "allow_all_outbound": true
            }
          ]
        },
        "estimated_monthly_cost_usd": 25.0,
        "capability_category": "networking",
        "aws_resources": [
          "AWS::EC2::VPC",
          "AWS::EC2::Subnet",
          "AWS::EC2::Subnet"
        ],
        "dependencies": [
          "networking"
        ],
        "security_features": [
          "vpc_networking"
        ]
      },
      "staging": {
        "service_name": "networking",
        "template_file": "/home/dee/workspace/AI/shieldcraft-ai/proton/networking-environment-template.yaml",
        "environment": "staging",
        "mode": "managed",
        "enabled": true,
        "instance_config": {
          "enabled": true,
          "mode": "managed",
          "vpc_id": "vpc-shieldcraft-staging",
          "cidr": "10.1.0.0/16",
          "subnets": [
            {
              "id": "subnet-pub-a",
              "cidr": "10.1.10.0/24",
              "type": "PUBLIC"
            },
            {
              "id": "subnet-priv-a",
              "cidr": "10.1.1.0/24",
              "type": "PRIVATE"
            },
            {
              "id": "subnet-priv-b",
              "cidr": "10.1.2.0/24",
              "type": "PRIVATE"
            }
          ],
          "security_groups": [
            {
              "id": "sg-msk",
              "description": "Security group for MSK brokers",
              "allow_all_outbound": true
            },
            {
              "id": "sg-lambda",
              "description": "Security group for Lambda functions",
              "allow_all_outbound": true
            },
            {
              "id": "sg-default",
              "description": "Default security group for ShieldCraft staging VPC",
              "allow_all_outbound": true
            }
          ]
        },
        "estimated_monthly_cost_usd": 100.0,
        "capability_category": "networking",
        "aws_resources": [
          "AWS::EC2::VPC",
          "AWS::EC2::Subnet",
          "AWS::EC2::Subnet"
        ],
        "dependencies": [
          "networking"
        ],
        "security_features": [
          "vpc_networking"
        ]
      },
      "prod": {
        "service_name": "networking",
        "template_file": "/home/dee/workspace/AI/shieldcraft-ai/proton/networking-environment-template.yaml",
        "environment": "prod",
        "mode": "managed",
        "enabled": true,
        "instance_config": {
          "enabled": true,
          "mode": "managed",
          "vpc_id": "vpc-shieldcraft-prod",
          "cidr": "10.2.0.0/16",
          "subnets": [
            {
              "id": "subnet-pub-a",
              "cidr": "10.2.10.0/24",
              "type": "PUBLIC"
            },
            {
              "id": "subnet-priv-a",
              "cidr": "10.2.1.0/24",
              "type": "PRIVATE"
            },
            {
              "id": "subnet-priv-b",
              "cidr": "10.2.2.0/24",
              "type": "PRIVATE"
            },
            {
              "id": "subnet-priv-c",
              "cidr": "10.2.3.0/24",
              "type": "PRIVATE"
            }
          ],
          "security_groups": [
            {
              "id": "sg-msk",
              "description": "Security group for MSK brokers",
              "allow_all_outbound": true
            },
            {
              "id": "sg-lambda",
              "description": "Security group for Lambda functions",
              "allow_all_outbound": true
            },
            {
              "id": "sg-default",
              "description": "Default security group for ShieldCraft prod VPC",
              "allow_all_outbound": true
            }
          ]
        },
        "estimated_monthly_cost_usd": 400.0,
        "capability_category": "networking",
        "aws_resources": [
          "AWS::EC2::VPC",
          "AWS::EC2::Subnet",
          "AWS::EC2::Subnet"
        ],
        "dependencies": [
          "networking"
        ],
        "security_features": [
          "vpc_networking"
        ]
      }
    },
    "stepfunctions": {
      "dev": {
        "service_name": "stepfunctions",
        "template_file": "/home/dee/workspace/AI/shieldcraft-ai/proton/stepfunctions-service-template.yaml",
        "environment": "dev",
        "mode": "managed",
        "enabled": true,
        "instance_config": {
          "enabled": true,
          "mode": "managed",
          "workflow_type": "express",
          "state_machines": [
            {
              "id": "DataIngestAndValidate",
              "name": "shieldcraft-dev-data-ingest-validate",
              "role_arn": "arn:aws:iam::123456789012:role/ShieldCraftStepFnRole",
              "comment": "Orchestrates data ingestion, validation, and error handling",
              "definition": [
                {
                  "id": "IngestData",
                  "type": "Task",
                  "resource": "arn:aws:lambda:af-south-1:123456789012:function:IngestDataLambda",
                  "next": "ValidateData",
                  "catch": [
                    {
                      "handler": "HandleIngestError",
                      "errors": [
                        "States.ALL"
                      ]
                    }
                  ]
                },
                {
                  "id": "ValidateData",
                  "type": "Task",
                  "resource": "arn:aws:lambda:af-south-1:123456789012:function:ValidateDataLambda",
                  "next": "IsValid"
                },
                {
                  "id": "IsValid",
                  "type": "Choice",
                  "choices": [
                    {
                      "condition": "string_equals",
                      "args": [
                        "$.validationResult",
                        "PASS"
                      ],
                      "next": "Success"
                    },
                    {
                      "condition": "string_equals",
                      "args": [
                        "$.validationResult",
                        "FAIL"
                      ],
                      "next": "HandleValidationError"
                    }
                  ],
                  "default": "HandleValidationError"
                },
                {
                  "id": "Success",
                  "type": "Pass",
                  "end": true
                },
                {
                  "id": "HandleIngestError",
                  "type": "Pass",
                  "end": true
                },
                {
                  "id": "HandleValidationError",
                  "type": "Pass",
                  "end": true
                }
              ]
            },
            {
              "id": "BenchmarkAndValidate",
              "name": "shieldcraft-dev-benchmark-validate",
              "role_arn": "arn:aws:iam::123456789012:role/ShieldCraftStepFnRole",
              "comment": "Orchestrates BEIR/MTEB benchmarking and model validation (dev: costless)",
              "definition": [
                {
                  "id": "RunBEIRBenchmark",
                  "type": "Pass",
                  "next": "RunMTEBBenchmark"
                },
                {
                  "id": "RunMTEBBenchmark",
                  "type": "Pass",
                  "next": "ValidateBenchmarkResults"
                },
                {
                  "id": "ValidateBenchmarkResults",
                  "type": "Pass",
                  "next": "Success"
                },
                {
                  "id": "Success",
                  "type": "Pass",
                  "end": true
                },
                {
                  "id": "HandleBenchmarkError",
                  "type": "Pass",
                  "end": true
                }
              ]
            }
          ]
        },
        "estimated_monthly_cost_usd": 1.0,
        "capability_category": "processing",
        "aws_resources": [
          "AWS::StepFunctions::StateMachine"
        ],
        "dependencies": [
          "iam"
        ],
        "security_features": [
          "iam_roles"
        ]
      },
      "staging": {
        "service_name": "stepfunctions",
        "template_file": "/home/dee/workspace/AI/shieldcraft-ai/proton/stepfunctions-service-template.yaml",
        "environment": "staging",
        "mode": "managed",
        "enabled": true,
        "instance_config": {
          "enabled": true,
          "mode": "managed",
          "state_machines": [
            {
              "id": "DataIngestAndValidate",
              "name": "shieldcraft-staging-data-ingest-validate",
              "role_arn": "arn:aws:iam::123456789012:role/ShieldCraftStepFnRole",
              "comment": "Orchestrates data ingestion, validation, and error handling",
              "definition": [
                {
                  "id": "IngestData",
                  "type": "Task",
                  "resource": "arn:aws:lambda:af-south-1:123456789012:function:IngestDataLambda",
                  "next": "ValidateData",
                  "catch": [
                    {
                      "handler": "HandleIngestError",
                      "errors": [
                        "States.ALL"
                      ]
                    }
                  ]
                },
                {
                  "id": "ValidateData",
                  "type": "Task",
                  "resource": "arn:aws:lambda:af-south-1:123456789012:function:ValidateDataLambda",
                  "next": "IsValid"
                },
                {
                  "id": "IsValid",
                  "type": "Choice",
                  "choices": [
                    {
                      "condition": "string_equals",
                      "args": [
                        "$.validationResult",
                        "PASS"
                      ],
                      "next": "Success"
                    },
                    {
                      "condition": "string_equals",
                      "args": [
                        "$.validationResult",
                        "FAIL"
                      ],
                      "next": "HandleValidationError"
                    }
                  ],
                  "default": "HandleValidationError"
                },
                {
                  "id": "Success",
                  "type": "Pass",
                  "end": true
                },
                {
                  "id": "HandleIngestError",
                  "type": "Pass",
                  "end": true
                },
                {
                  "id": "HandleValidationError",
                  "type": "Pass",
                  "end": true
                }
              ]
            },
            {
              "id": "BenchmarkAndValidate",
              "name": "shieldcraft-staging-benchmark-validate",
              "role_arn": "arn:aws:iam::123456789012:role/ShieldCraftStepFnRole",
              "comment": "Orchestrates BEIR/MTEB benchmarking and model validation (staging: full orchestration)",
              "definition": [
                {
                  "id": "RunBEIRBenchmark",
                  "type": "Task",
                  "resource": "arn:aws:lambda:af-south-1:123456789012:function:RunBEIRBenchmarkLambda",
                  "next": "RunMTEBBenchmark",
                  "catch": [
                    {
                      "handler": "HandleBenchmarkError",
                      "errors": [
                        "States.ALL"
                      ]
                    }
                  ]
                },
                {
                  "id": "RunMTEBBenchmark",
                  "type": "Task",
                  "resource": "arn:aws:lambda:af-south-1:123456789012:function:RunMTEBBenchmarkLambda",
                  "next": "ValidateBenchmarkResults",
                  "catch": [
                    {
                      "handler": "HandleBenchmarkError",
                      "errors": [
                        "States.ALL"
                      ]
                    }
                  ]
                },
                {
                  "id": "ValidateBenchmarkResults",
                  "type": "Task",
                  "resource": "arn:aws:lambda:af-south-1:123456789012:function:ValidateBenchmarkResultsLambda",
                  "next": "Success",
                  "catch": [
                    {
                      "handler": "HandleBenchmarkError",
                      "errors": [
                        "States.ALL"
                      ]
                    }
                  ]
                },
                {
                  "id": "Success",
                  "type": "Pass",
                  "end": true
                },
                {
                  "id": "HandleBenchmarkError",
                  "type": "Pass",
                  "end": true
                }
              ]
            }
          ]
        },
        "estimated_monthly_cost_usd": 10.0,
        "capability_category": "processing",
        "aws_resources": [
          "AWS::StepFunctions::StateMachine"
        ],
        "dependencies": [
          "iam"
        ],
        "security_features": [
          "iam_roles"
        ]
      },
      "prod": {
        "service_name": "stepfunctions",
        "template_file": "/home/dee/workspace/AI/shieldcraft-ai/proton/stepfunctions-service-template.yaml",
        "environment": "prod",
        "mode": "managed",
        "enabled": true,
        "instance_config": {
          "enabled": true,
          "mode": "managed",
          "state_machines": [
            {
              "id": "DataIngestAndValidate",
              "name": "shieldcraft-prod-data-ingest-validate",
              "role_arn": "arn:aws:iam::123456789012:role/ShieldCraftStepFnRole",
              "comment": "Orchestrates data ingestion, validation, and error handling",
              "definition": [
                {
                  "id": "IngestData",
                  "type": "Task",
                  "resource": "arn:aws:lambda:af-south-1:123456789012:function:IngestDataLambda",
                  "next": "ValidateData",
                  "catch": [
                    {
                      "handler": "HandleIngestError",
                      "errors": [
                        "States.ALL"
                      ]
                    }
                  ]
                },
                {
                  "id": "ValidateData",
                  "type": "Task",
                  "resource": "arn:aws:lambda:af-south-1:123456789012:function:ValidateDataLambda",
                  "next": "IsValid"
                },
                {
                  "id": "IsValid",
                  "type": "Choice",
                  "choices": [
                    {
                      "condition": "string_equals",
                      "args": [
                        "$.validationResult",
                        "PASS"
                      ],
                      "next": "Success"
                    },
                    {
                      "condition": "string_equals",
                      "args": [
                        "$.validationResult",
                        "FAIL"
                      ],
                      "next": "HandleValidationError"
                    }
                  ],
                  "default": "HandleValidationError"
                },
                {
                  "id": "Success",
                  "type": "Pass",
                  "end": true
                },
                {
                  "id": "HandleIngestError",
                  "type": "Pass",
                  "end": true
                },
                {
                  "id": "HandleValidationError",
                  "type": "Pass",
                  "end": true
                }
              ]
            },
            {
              "id": "BenchmarkAndValidate",
              "name": "shieldcraft-prod-benchmark-validate",
              "role_arn": "arn:aws:iam::123456789012:role/ShieldCraftStepFnRole",
              "comment": "Orchestrates BEIR/MTEB benchmarking and model validation (prod: full orchestration)",
              "definition": [
                {
                  "id": "RunBEIRBenchmark",
                  "type": "Task",
                  "resource": "arn:aws:lambda:af-south-1:123456789012:function:RunBEIRBenchmarkLambda",
                  "next": "RunMTEBBenchmark",
                  "catch": [
                    {
                      "handler": "HandleBenchmarkError",
                      "errors": [
                        "States.ALL"
                      ]
                    }
                  ]
                },
                {
                  "id": "RunMTEBBenchmark",
                  "type": "Task",
                  "resource": "arn:aws:lambda:af-south-1:123456789012:function:RunMTEBBenchmarkLambda",
                  "next": "ValidateBenchmarkResults",
                  "catch": [
                    {
                      "handler": "HandleBenchmarkError",
                      "errors": [
                        "States.ALL"
                      ]
                    }
                  ]
                },
                {
                  "id": "ValidateBenchmarkResults",
                  "type": "Task",
                  "resource": "arn:aws:lambda:af-south-1:123456789012:function:ValidateBenchmarkResultsLambda",
                  "next": "Success",
                  "catch": [
                    {
                      "handler": "HandleBenchmarkError",
                      "errors": [
                        "States.ALL"
                      ]
                    }
                  ]
                },
                {
                  "id": "Success",
                  "type": "Pass",
                  "end": true
                },
                {
                  "id": "HandleBenchmarkError",
                  "type": "Pass",
                  "end": true
                }
              ]
            }
          ]
        },
        "estimated_monthly_cost_usd": 100.0,
        "capability_category": "processing",
        "aws_resources": [
          "AWS::StepFunctions::StateMachine"
        ],
        "dependencies": [
          "iam"
        ],
        "security_features": [
          "iam_roles"
        ]
      }
    },
    "iam": {
      "dev": {
        "service_name": "iam",
        "template_file": "/home/dee/workspace/AI/shieldcraft-ai/proton/iam-service-template.yaml",
        "environment": "dev",
        "mode": "managed",
        "enabled": true,
        "instance_config": {
          "enabled": true,
          "mode": "managed"
        },
        "estimated_monthly_cost_usd": 0.0,
        "capability_category": "security",
        "aws_resources": [
          "AWS::IAM::Role",
          "AWS::IAM::Policy"
        ],
        "dependencies": [],
        "security_features": [
          "iam_roles",
          "iam_policies"
        ]
      },
      "staging": {
        "service_name": "iam",
        "template_file": "/home/dee/workspace/AI/shieldcraft-ai/proton/iam-service-template.yaml",
        "environment": "staging",
        "mode": "managed",
        "enabled": true,
        "instance_config": {
          "enabled": true,
          "mode": "managed"
        },
        "estimated_monthly_cost_usd": 0.0,
        "capability_category": "security",
        "aws_resources": [
          "AWS::IAM::Role",
          "AWS::IAM::Policy"
        ],
        "dependencies": [],
        "security_features": [
          "iam_roles",
          "iam_policies"
        ]
      },
      "prod": {
        "service_name": "iam",
        "template_file": "/home/dee/workspace/AI/shieldcraft-ai/proton/iam-service-template.yaml",
        "environment": "prod",
        "mode": "managed",
        "enabled": true,
        "instance_config": {
          "enabled": true,
          "mode": "managed"
        },
        "estimated_monthly_cost_usd": 0.0,
        "capability_category": "security",
        "aws_resources": [
          "AWS::IAM::Role",
          "AWS::IAM::Policy"
        ],
        "dependencies": [],
        "security_features": [
          "iam_roles",
          "iam_policies"
        ]
      }
    },
    "s3": {
      "dev": {
        "service_name": "s3",
        "template_file": "/home/dee/workspace/AI/shieldcraft-ai/proton/s3-service-template.yaml",
        "environment": "dev",
        "mode": "managed",
        "enabled": true,
        "instance_config": {
          "enabled": true,
          "mode": "managed",
          "buckets": [
            {
              "id": "RawDataBucket",
              "name": "shieldcraft-dev-raw",
              "versioned": true,
              "encryption": "S3_MANAGED",
              "block_public_access": "BLOCK_ALL",
              "removal_policy": "DESTROY",
              "enable_glue_crawler": true,
              "crawler": {
                "schedule": "cron(0 2 * * ? *)",
                "table_prefix": "raw_"
              },
              "lifecycle_rules": [
                {
                  "id": "transition-raw-dev",
                  "enabled": true,
                  "transitions": [
                    {
                      "days": 30,
                      "storage_class": "STANDARD_IA"
                    },
                    {
                      "days": 60,
                      "storage_class": "GLACIER"
                    }
                  ],
                  "expiration_days": 365,
                  "abort_incomplete_multipart_upload_days": 7
                }
              ]
            },
            {
              "id": "ProcessedDataBucket",
              "name": "shieldcraft-dev-processed",
              "versioned": true,
              "encryption": "S3_MANAGED",
              "block_public_access": "BLOCK_ALL",
              "removal_policy": "DESTROY",
              "enable_glue_crawler": true,
              "crawler": {
                "schedule": "cron(0 3 * * ? *)",
                "table_prefix": "processed_"
              },
              "lifecycle_rules": [
                {
                  "id": "transition-processed-dev",
                  "enabled": true,
                  "transitions": [
                    {
                      "days": 30,
                      "storage_class": "STANDARD_IA"
                    },
                    {
                      "days": 60,
                      "storage_class": "GLACIER"
                    }
                  ],
                  "expiration_days": 365,
                  "abort_incomplete_multipart_upload_days": 7
                }
              ]
            },
            {
              "id": "AnalyticsDataBucket",
              "name": "shieldcraft-dev-analytics",
              "versioned": true,
              "encryption": "S3_MANAGED",
              "block_public_access": "BLOCK_ALL",
              "removal_policy": "DESTROY",
              "enable_glue_crawler": true,
              "crawler": {
                "schedule": "cron(0 4 * * ? *)",
                "table_prefix": "analytics_"
              },
              "lifecycle_rules": [
                {
                  "id": "transition-analytics-dev",
                  "enabled": true,
                  "transitions": [
                    {
                      "days": 30,
                      "storage_class": "STANDARD_IA"
                    },
                    {
                      "days": 60,
                      "storage_class": "GLACIER"
                    }
                  ],
                  "expiration_days": 365,
                  "abort_incomplete_multipart_upload_days": 7
                }
              ]
            }
          ],
          "lifecycle_policy_days": 30,
          "enable_access_logs": true
        },
        "estimated_monthly_cost_usd": 9.0,
        "capability_category": "storage",
        "aws_resources": [
          "AWS::S3::Bucket"
        ],
        "dependencies": [
          "s3"
        ],
        "security_features": [
          "encryption",
          "iam_policies"
        ]
      },
      "staging": {
        "service_name": "s3",
        "template_file": "/home/dee/workspace/AI/shieldcraft-ai/proton/s3-service-template.yaml",
        "environment": "staging",
        "mode": "managed",
        "enabled": true,
        "instance_config": {
          "enabled": true,
          "mode": "managed",
          "buckets": [
            {
              "id": "RawDataBucket",
              "name": "shieldcraft-staging-raw",
              "versioned": true,
              "encryption": "S3_MANAGED",
              "block_public_access": "BLOCK_ALL",
              "removal_policy": "DESTROY",
              "lifecycle_rules": [
                {
                  "id": "transition-raw-staging",
                  "enabled": true,
                  "transitions": [
                    {
                      "days": 60,
                      "storage_class": "STANDARD_IA"
                    },
                    {
                      "days": 120,
                      "storage_class": "GLACIER"
                    }
                  ],
                  "expiration_days": 730,
                  "abort_incomplete_multipart_upload_days": 7
                }
              ]
            },
            {
              "id": "ProcessedDataBucket",
              "name": "shieldcraft-staging-processed",
              "versioned": true,
              "encryption": "S3_MANAGED",
              "block_public_access": "BLOCK_ALL",
              "removal_policy": "DESTROY",
              "lifecycle_rules": [
                {
                  "id": "transition-processed-staging",
                  "enabled": true,
                  "transitions": [
                    {
                      "days": 60,
                      "storage_class": "STANDARD_IA"
                    },
                    {
                      "days": 120,
                      "storage_class": "GLACIER"
                    }
                  ],
                  "expiration_days": 730,
                  "abort_incomplete_multipart_upload_days": 7
                }
              ]
            },
            {
              "id": "AnalyticsDataBucket",
              "name": "shieldcraft-staging-analytics",
              "versioned": true,
              "encryption": "S3_MANAGED",
              "block_public_access": "BLOCK_ALL",
              "removal_policy": "DESTROY",
              "lifecycle_rules": [
                {
                  "id": "transition-analytics-staging",
                  "enabled": true,
                  "transitions": [
                    {
                      "days": 60,
                      "storage_class": "STANDARD_IA"
                    },
                    {
                      "days": 120,
                      "storage_class": "GLACIER"
                    }
                  ],
                  "expiration_days": 730,
                  "abort_incomplete_multipart_upload_days": 7
                }
              ]
            }
          ],
          "lifecycle_policy_days": 60,
          "enable_access_logs": true
        },
        "estimated_monthly_cost_usd": 36.0,
        "capability_category": "storage",
        "aws_resources": [
          "AWS::S3::Bucket"
        ],
        "dependencies": [
          "s3"
        ],
        "security_features": [
          "encryption",
          "iam_policies"
        ]
      },
      "prod": {
        "service_name": "s3",
        "template_file": "/home/dee/workspace/AI/shieldcraft-ai/proton/s3-service-template.yaml",
        "environment": "prod",
        "mode": "managed",
        "enabled": true,
        "instance_config": {
          "enabled": true,
          "mode": "managed",
          "buckets": [
            {
              "id": "RawDataBucket",
              "name": "shieldcraft-prod-raw",
              "versioned": true,
              "encryption": "S3_MANAGED",
              "block_public_access": "BLOCK_ALL",
              "removal_policy": "RETAIN",
              "lifecycle_rules": [
                {
                  "id": "transition-raw-prod",
                  "enabled": true,
                  "transitions": [
                    {
                      "days": 90,
                      "storage_class": "STANDARD_IA"
                    },
                    {
                      "days": 180,
                      "storage_class": "GLACIER"
                    }
                  ],
                  "expiration_days": 1095,
                  "abort_incomplete_multipart_upload_days": 7
                }
              ]
            },
            {
              "id": "ProcessedDataBucket",
              "name": "shieldcraft-prod-processed",
              "versioned": true,
              "encryption": "S3_MANAGED",
              "block_public_access": "BLOCK_ALL",
              "removal_policy": "RETAIN",
              "lifecycle_rules": [
                {
                  "id": "transition-processed-prod",
                  "enabled": true,
                  "transitions": [
                    {
                      "days": 90,
                      "storage_class": "STANDARD_IA"
                    },
                    {
                      "days": 180,
                      "storage_class": "GLACIER"
                    }
                  ],
                  "expiration_days": 1095,
                  "abort_incomplete_multipart_upload_days": 7
                }
              ]
            },
            {
              "id": "AnalyticsDataBucket",
              "name": "shieldcraft-prod-analytics",
              "versioned": true,
              "encryption": "S3_MANAGED",
              "block_public_access": "BLOCK_ALL",
              "lifecycle_rules": [
                {
                  "id": "transition-analytics-prod",
                  "enabled": true,
                  "transitions": [
                    {
                      "days": 90,
                      "storage_class": "STANDARD_IA"
                    },
                    {
                      "days": 180,
                      "storage_class": "GLACIER"
                    }
                  ],
                  "expiration_days": 1095,
                  "abort_incomplete_multipart_upload_days": 7
                }
              ]
            }
          ],
          "lifecycle_policy_days": 90,
          "enable_access_logs": true
        },
        "estimated_monthly_cost_usd": 105.0,
        "capability_category": "storage",
        "aws_resources": [
          "AWS::S3::Bucket"
        ],
        "dependencies": [
          "s3"
        ],
        "security_features": [
          "encryption",
          "iam_policies"
        ]
      }
    },
    "glue": {
      "dev": {
        "service_name": "glue",
        "template_file": "/home/dee/workspace/AI/shieldcraft-ai/proton/glue-service-template.yaml",
        "environment": "dev",
        "mode": "managed",
        "enabled": true,
        "instance_config": {
          "enabled": true,
          "mode": "managed",
          "database_name": "shieldcraft_dev_db",
          "crawler_schedule": "cron(0 2 * * ? *)",
          "enable_data_quality": false
        },
        "estimated_monthly_cost_usd": 5.0,
        "capability_category": "processing",
        "aws_resources": [
          "AWS::Glue::Database",
          "AWS::Glue::Crawler"
        ],
        "dependencies": [],
        "security_features": [
          "iam_roles"
        ]
      },
      "staging": {
        "service_name": "glue",
        "template_file": "/home/dee/workspace/AI/shieldcraft-ai/proton/glue-service-template.yaml",
        "environment": "staging",
        "mode": "managed",
        "enabled": true,
        "instance_config": {
          "enabled": true,
          "mode": "managed",
          "database_name": "shieldcraft_staging_db",
          "crawler_schedule": "cron(0 2 * * ? *)",
          "enable_data_quality": true
        },
        "estimated_monthly_cost_usd": 45.0,
        "capability_category": "processing",
        "aws_resources": [
          "AWS::Glue::Database",
          "AWS::Glue::Crawler"
        ],
        "dependencies": [],
        "security_features": [
          "iam_roles"
        ]
      },
      "prod": {
        "service_name": "glue",
        "template_file": "/home/dee/workspace/AI/shieldcraft-ai/proton/glue-service-template.yaml",
        "environment": "prod",
        "mode": "managed",
        "enabled": true,
        "instance_config": {
          "enabled": true,
          "mode": "managed",
          "database_name": "shieldcraft_prod_db",
          "crawler_schedule": "cron(0 2 * * ? *)",
          "enable_data_quality": true
        },
        "estimated_monthly_cost_usd": 180.0,
        "capability_category": "processing",
        "aws_resources": [
          "AWS::Glue::Database",
          "AWS::Glue::Crawler"
        ],
        "dependencies": [],
        "security_features": [
          "iam_roles"
        ]
      }
    },
    "msk": {
      "dev": {
        "service_name": "msk",
        "template_file": "/home/dee/workspace/AI/shieldcraft-ai/proton/msk-service-template.yaml",
        "environment": "dev",
        "mode": "external",
        "enabled": true,
        "instance_config": {
          "enabled": true,
          "mode": "external",
          "security_group": {
            "id": "MskSecurityGroup",
            "description": "Security group for MSK brokers",
            "allow_all_outbound": true
          },
          "external": {
            "bootstrap_brokers": "redpanda:9092",
            "scram_secret_arn": ""
          },
          "cluster": {
            "id": "ShieldCraftMskCluster",
            "name": "shieldcraft-msk-cluster",
            "kafka_version": "3.5.1",
            "number_of_broker_nodes": 3,
            "instance_type": "kafka.m5.large",
            "enhanced_monitoring": "PER_TOPIC_PER_BROKER",
            "client_authentication": {
              "sasl_scram": false,
              "tls": true
            },
            "encryption_in_transit": {
              "client_broker": "TLS",
              "in_cluster": true
            },
            "public_access": false,
            "vpc_subnet_ids": [
              "subnet-priv-a",
              "subnet-priv-b"
            ],
            "security_group_ids": [
              "sg-msk"
            ]
          }
        },
        "estimated_monthly_cost_usd": 0.0,
        "capability_category": "ingestion",
        "aws_resources": [
          "AWS::MSK::Cluster"
        ],
        "dependencies": [
          "networking",
          "secrets_manager"
        ],
        "security_features": [
          "encryption",
          "secrets_management",
          "security_groups"
        ]
      },
      "staging": {
        "service_name": "msk",
        "template_file": "/home/dee/workspace/AI/shieldcraft-ai/proton/msk-service-template.yaml",
        "environment": "staging",
        "mode": "managed",
        "enabled": true,
        "instance_config": {
          "enabled": true,
          "mode": "managed",
          "security_group": {
            "id": "MskSecurityGroup",
            "description": "Security group for MSK brokers",
            "allow_all_outbound": true
          },
          "cluster": {
            "id": "ShieldCraftMskCluster",
            "name": "shieldcraft-msk-cluster-staging",
            "kafka_version": "3.5.1",
            "number_of_broker_nodes": 3,
            "instance_type": "kafka.m5.large",
            "enhanced_monitoring": "PER_TOPIC_PER_BROKER",
            "client_authentication": {
              "sasl_scram": false,
              "tls": true
            },
            "encryption_in_transit": {
              "client_broker": "TLS",
              "in_cluster": true
            },
            "public_access": false,
            "vpc_subnet_ids": [
              "subnet-priv-a",
              "subnet-priv-b"
            ],
            "security_group_ids": [
              "sg-msk"
            ]
          }
        },
        "estimated_monthly_cost_usd": 547.5,
        "capability_category": "ingestion",
        "aws_resources": [
          "AWS::MSK::Cluster"
        ],
        "dependencies": [
          "networking"
        ],
        "security_features": [
          "encryption",
          "secrets_management",
          "security_groups"
        ]
      },
      "prod": {
        "service_name": "msk",
        "template_file": "/home/dee/workspace/AI/shieldcraft-ai/proton/msk-service-template.yaml",
        "environment": "prod",
        "mode": "managed",
        "enabled": true,
        "instance_config": {
          "enabled": true,
          "mode": "managed",
          "security_group": {
            "id": "sg-msk",
            "description": "Security group for MSK brokers",
            "allow_all_outbound": true
          },
          "cluster": {
            "id": "ShieldCraftMskCluster",
            "name": "shieldcraft-msk-cluster-prod",
            "kafka_version": "3.5.1",
            "number_of_broker_nodes": 6,
            "instance_type": "kafka.m5.large",
            "encryption_in_transit": {
              "client_broker": "TLS",
              "in_cluster": true
            },
            "public_access": false,
            "vpc_subnet_ids": [
              "subnet-priv-a",
              "subnet-priv-b",
              "subnet-priv-c"
            ],
            "security_group_ids": [
              "sg-msk"
            ]
          }
        },
        "estimated_monthly_cost_usd": 1971.0,
        "capability_category": "ingestion",
        "aws_resources": [
          "AWS::MSK::Cluster"
        ],
        "dependencies": [
          "networking"
        ],
        "security_features": [
          "encryption",
          "secrets_management",
          "security_groups"
        ]
      }
    }
  },
  "cost_analysis": {
    "eventbridge": {
      "dev": 0.5,
      "staging": 5.0,
      "prod": 50.0
    },
    "cloud_native_hardening": {
      "dev": 2.5,
      "staging": 15.0,
      "prod": 100.0
    },
    "sagemaker": {
      "dev": 0.0,
      "staging": 89.55,
      "prod": 805.2
    },
    "lakeformation": {
      "dev": 0.0,
      "staging": 5.0,
      "prod": 50.0
    },
    "security": {
      "dev": 5.0,
      "staging": 25.0,
      "prod": 200.0
    },
    "opensearch": {
      "dev": 0.0,
      "staging": 61.6,
      "prod": 938.91
    },
    "airbyte": {
      "dev": 0.0,
      "staging": 120.0,
      "prod": 360.0
    },
    "lambda": {
      "dev": 2.5,
      "staging": 25.0,
      "prod": 200.0
    },
    "networking": {
      "dev": 25.0,
      "staging": 100.0,
      "prod": 400.0
    },
    "stepfunctions": {
      "dev": 1.0,
      "staging": 10.0,
      "prod": 100.0
    },
    "iam": {
      "dev": 0.0,
      "staging": 0.0,
      "prod": 0.0
    },
    "s3": {
      "dev": 9.0,
      "staging": 36.0,
      "prod": 105.0
    },
    "glue": {
      "dev": 5.0,
      "staging": 45.0,
      "prod": 180.0
    },
    "msk": {
      "dev": 0.0,
      "staging": 547.5,
      "prod": 1971.0
    }
  },
  "dependency_graph": {
    "msk": [
      "networking",
      "iam"
    ],
    "opensearch": [
      "networking",
      "iam"
    ],
    "lambda": [
      "iam",
      "networking"
    ],
    "sagemaker": [
      "iam",
      "s3"
    ],
    "glue": [
      "iam",
      "s3"
    ],
    "stepfunctions": [
      "iam",
      "lambda"
    ]
  },
  "security_posture": {
    "dev": [
      "encryption_at_rest",
      "iam_roles",
      "vpc_isolation"
    ],
    "staging": [
      "encryption_at_rest",
      "encryption_in_transit",
      "iam_roles",
      "vpc_isolation",
      "cloudwatch_monitoring"
    ],
    "prod": [
      "encryption_at_rest",
      "encryption_in_transit",
      "iam_roles",
      "vpc_isolation",
      "cloudwatch_monitoring",
      "config_rules",
      "guardduty"
    ]
  },
  "template_inventory": {
    "eventbridge": {
      "file_path": "/home/dee/workspace/AI/shieldcraft-ai/proton/eventbridge-service-template.yaml",
      "description": "ShieldCraft AI Proton EventBridge Service Template",
      "parameters": {
        "AppName": {
          "Type": "String",
          "Description": "Application name for tagging"
        },
        "Domain": {
          "Type": "String",
          "Description": "Business domain for tagging"
        },
        "EventBusName": {
          "Type": "String",
          "Description": "Name of the EventBridge bus"
        },
        "RuleName": {
          "Type": "String",
          "Description": "Name of the EventBridge rule"
        },
        "TargetArn": {
          "Type": "String",
          "Description": "ARN of the rule target (e.g., Lambda, StepFunction)"
        },
        "EnvironmentName": {
          "Type": "String",
          "AllowedValues": [
            "dev",
            "staging",
            "prod"
          ],
          "Description": "Name of the Proton environment"
        }
      },
      "resources": {
        "EventBus": {
          "Type": "AWS::Events::EventBus",
          "Properties": {
            "Name": {
              "Ref": "EventBusName"
            },
            "Tags": [
              {
                "Key": "Project",
                "Value": "ShieldCraftAI"
              },
              {
                "Key": "App",
                "Value": {
                  "Ref": "AppName"
                }
              },
              {
                "Key": "Domain",
                "Value": {
                  "Ref": "Domain"
                }
              },
              {
                "Key": "Env",
                "Value": {
                  "Ref": "EnvironmentName"
                }
              },
              {
                "Key": "Environment",
                "Value": "EnvironmentName"
              }
            ]
          }
        },
        "EventRule": {
          "Type": "AWS::Events::Rule",
          "Properties": {
            "Name": {
              "Ref": "RuleName"
            },
            "EventBusName": {
              "Ref": "EventBusName"
            },
            "EventPattern": {
              "source": [
                "shieldcraft.ai"
              ]
            },
            "State": "ENABLED",
            "Targets": [
              {
                "Arn": {
                  "Ref": "TargetArn"
                },
                "Id": "Target1"
              }
            ],
            "Tags": [
              {
                "Key": "Project",
                "Value": "ShieldCraftAI"
              },
              {
                "Key": "App",
                "Value": {
                  "Ref": "AppName"
                }
              },
              {
                "Key": "Domain",
                "Value": {
                  "Ref": "Domain"
                }
              },
              {
                "Key": "Env",
                "Value": {
                  "Ref": "EnvironmentName"
                }
              },
              {
                "Key": "Environment",
                "Value": "EnvironmentName"
              }
            ]
          }
        }
      },
      "outputs": {
        "EventBusName": {
          "Description": "Name of the EventBridge bus",
          "Value": "EventBus"
        },
        "EventRuleName": {
          "Description": "Name of the EventBridge rule",
          "Value": "EventRule"
        }
      },
      "aws_resources": [
        "AWS::Events::EventBus",
        "AWS::Events::Rule"
      ],
      "environment_aware": true,
      "security_features": [],
      "estimated_complexity": "medium"
    },
    "cloud_native_hardening": {
      "file_path": "/home/dee/workspace/AI/shieldcraft-ai/proton/cloud_native_hardening-service-template.yaml",
      "description": "ShieldCraft AI Proton Cloud Native Hardening Service Template",
      "parameters": {
        "ConfigRuleName": {
          "Type": "String",
          "Description": "Name of the AWS Config rule"
        },
        "IAMBoundaryPolicyName": {
          "Type": "String",
          "Description": "Name of the IAM boundary policy"
        },
        "VaultSecretArn": {
          "Type": "String",
          "Description": "ARN of the imported vault secret"
        },
        "EnvironmentName": {
          "Type": "String",
          "Description": "Name of the Proton environment"
        }
      },
      "resources": {
        "ConfigRule": {
          "Type": "AWS::Config::ConfigRule",
          "Properties": {
            "ConfigRuleName": {
              "Ref": "ConfigRuleName"
            },
            "Source": {
              "Owner": "AWS",
              "SourceIdentifier": "IAM_PASSWORD_POLICY"
            },
            "Tags": [
              {
                "Key": "Environment",
                "Value": {
                  "Ref": "EnvironmentName"
                }
              }
            ]
          }
        },
        "IAMBoundaryPolicy": {
          "Type": "AWS::IAM::ManagedPolicy",
          "Properties": {
            "ManagedPolicyName": {
              "Ref": "IAMBoundaryPolicyName"
            },
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": "*",
                  "Resource": "*"
                }
              ]
            },
            "Tags": [
              {
                "Key": "Environment",
                "Value": {
                  "Ref": "EnvironmentName"
                }
              }
            ]
          }
        },
        "VaultSecret": {
          "Type": "AWS::SecretsManager::Secret",
          "Properties": {
            "Name": {
              "Ref": "ConfigRuleName"
            },
            "Description": "Cloud native hardening secret",
            "SecretString": {
              "Ref": "VaultSecretArn"
            },
            "Tags": [
              {
                "Key": "Environment",
                "Value": {
                  "Ref": "EnvironmentName"
                }
              }
            ]
          }
        }
      },
      "outputs": {
        "ConfigRuleName": {
          "Description": "Name of the AWS Config rule",
          "Value": {
            "Ref": "ConfigRule"
          }
        },
        "IAMBoundaryPolicyArn": {
          "Description": "ARN of the IAM boundary policy",
          "Value": {
            "Ref": "IAMBoundaryPolicy"
          }
        },
        "VaultSecretArn": {
          "Description": "ARN of the imported vault secret",
          "Value": {
            "Ref": "VaultSecret"
          }
        }
      },
      "aws_resources": [
        "AWS::Config::ConfigRule",
        "AWS::IAM::ManagedPolicy",
        "AWS::SecretsManager::Secret"
      ],
      "environment_aware": true,
      "security_features": [
        "iam_roles",
        "secrets_management",
        "iam_policies"
      ],
      "estimated_complexity": "low"
    },
    "sagemaker": {
      "file_path": "/home/dee/workspace/AI/shieldcraft-ai/proton/sagemaker-service-template.yaml",
      "description": "ShieldCraft AI Proton SageMaker Service Template",
      "parameters": {
        "AppName": {
          "Type": "String",
          "Description": "Application name for tagging"
        },
        "Domain": {
          "Type": "String",
          "Description": "Business domain for tagging"
        },
        "EndpointName": {
          "Type": "String",
          "Description": "Name of the SageMaker endpoint"
        },
        "ModelName": {
          "Type": "String",
          "Description": "Name of the SageMaker model"
        },
        "InstanceType": {
          "Type": "String",
          "Description": "EC2 instance type for endpoint",
          "Default": "ml.m5.large"
        },
        "ExecutionRoleArn": {
          "Type": "String",
          "Description": "ARN of the SageMaker execution role"
        },
        "EnvironmentName": {
          "Type": "String",
          "AllowedValues": [
            "dev",
            "staging",
            "prod"
          ],
          "Description": "Name of the Proton environment"
        }
      },
      "resources": {
        "SageMakerModel": {
          "Type": "AWS::SageMaker::Model",
          "Properties": {
            "ModelName": {
              "Ref": "ModelName"
            },
            "PrimaryContainer": {
              "Image": "public.ecr.aws/sagemaker/model:latest",
              "ModelDataUrl": "s3://bucket/model.tar.gz"
            },
            "ExecutionRoleArn": {
              "Ref": "ExecutionRoleArn"
            },
            "Tags": [
              {
                "Key": "Project",
                "Value": "ShieldCraftAI"
              },
              {
                "Key": "App",
                "Value": {
                  "Ref": "AppName"
                }
              },
              {
                "Key": "Domain",
                "Value": {
                  "Ref": "Domain"
                }
              },
              {
                "Key": "Env",
                "Value": {
                  "Ref": "EnvironmentName"
                }
              },
              {
                "Key": "Environment",
                "Value": "EnvironmentName"
              }
            ]
          }
        },
        "SageMakerEndpointConfig": {
          "Type": "AWS::SageMaker::EndpointConfig",
          "Properties": {
            "EndpointConfigName": {
              "Ref": "EndpointName"
            },
            "ProductionVariants": [
              {
                "VariantName": "AllTraffic",
                "ModelName": {
                  "Ref": "ModelName"
                },
                "InitialInstanceCount": 1,
                "InstanceType": {
                  "Ref": "InstanceType"
                }
              }
            ],
            "Tags": [
              {
                "Key": "Project",
                "Value": "ShieldCraftAI"
              },
              {
                "Key": "App",
                "Value": {
                  "Ref": "AppName"
                }
              },
              {
                "Key": "Domain",
                "Value": {
                  "Ref": "Domain"
                }
              },
              {
                "Key": "Env",
                "Value": {
                  "Ref": "EnvironmentName"
                }
              },
              {
                "Key": "Environment",
                "Value": "EnvironmentName"
              }
            ]
          }
        },
        "SageMakerEndpoint": {
          "Type": "AWS::SageMaker::Endpoint",
          "Properties": {
            "EndpointName": {
              "Ref": "EndpointName"
            },
            "EndpointConfigName": {
              "Ref": "EndpointName"
            },
            "Tags": [
              {
                "Key": "Project",
                "Value": "ShieldCraftAI"
              },
              {
                "Key": "App",
                "Value": {
                  "Ref": "AppName"
                }
              },
              {
                "Key": "Domain",
                "Value": {
                  "Ref": "Domain"
                }
              },
              {
                "Key": "Env",
                "Value": {
                  "Ref": "EnvironmentName"
                }
              },
              {
                "Key": "Environment",
                "Value": "EnvironmentName"
              }
            ]
          }
        }
      },
      "outputs": {
        "SageMakerEndpointName": {
          "Description": "Name of the SageMaker endpoint",
          "Value": {
            "Ref": "SageMakerEndpoint"
          }
        },
        "SageMakerModelName": {
          "Description": "Name of the SageMaker model",
          "Value": {
            "Ref": "SageMakerModel"
          }
        }
      },
      "aws_resources": [
        "AWS::SageMaker::Model",
        "AWS::SageMaker::EndpointConfig",
        "AWS::SageMaker::Endpoint"
      ],
      "environment_aware": true,
      "security_features": [],
      "estimated_complexity": "medium"
    },
    "lakeformation": {
      "file_path": "/home/dee/workspace/AI/shieldcraft-ai/proton/lakeformation-service-template.yaml",
      "description": "ShieldCraft AI Proton Lake Formation Service Template",
      "parameters": {
        "AppName": {
          "Type": "String",
          "Description": "Application name for tagging"
        },
        "Domain": {
          "Type": "String",
          "Description": "Business domain for tagging"
        },
        "DataLakeAdmins": {
          "Type": "List<String>",
          "Description": "List of IAM ARNs for Lake Formation admins"
        },
        "DatabaseName": {
          "Type": "String",
          "Description": "Name of the Glue database to register"
        },
        "S3Location": {
          "Type": "String",
          "Description": "S3 path for the data lake (e.g., s3://bucket/prefix)"
        },
        "EnvironmentName": {
          "Type": "String",
          "AllowedValues": [
            "dev",
            "staging",
            "prod"
          ],
          "Description": "Name of the Proton environment"
        }
      },
      "resources": {
        "LakeFormationDataLakeSettings": {
          "Type": "AWS::LakeFormation::DataLakeSettings",
          "Properties": {
            "Admins": {
              "Ref": "DataLakeAdmins"
            }
          }
        },
        "LakeFormationResource": {
          "Type": "AWS::LakeFormation::Resource",
          "Properties": {
            "ResourceArn": {
              "Ref": "S3Location"
            },
            "UseServiceLinkedRole": true
          }
        },
        "GlueDatabase": {
          "Type": "AWS::Glue::Database",
          "Properties": {
            "CatalogId": {
              "Ref": "AWS::AccountId"
            },
            "DatabaseInput": {
              "Name": {
                "Ref": "DatabaseName"
              },
              "Description": "Lake Formation database for ShieldCraft AI"
            },
            "Tags": [
              {
                "Key": "Project",
                "Value": "ShieldCraftAI"
              },
              {
                "Key": "App",
                "Value": {
                  "Ref": "AppName"
                }
              },
              {
                "Key": "Domain",
                "Value": {
                  "Ref": "Domain"
                }
              },
              {
                "Key": "Env",
                "Value": {
                  "Ref": "EnvironmentName"
                }
              },
              {
                "Key": "Environment",
                "Value": "EnvironmentName"
              }
            ]
          }
        }
      },
      "outputs": {
        "LakeFormationAdmins": {
          "Description": "List of Lake Formation admin ARNs",
          "Value": {
            "Ref": "DataLakeAdmins"
          }
        },
        "LakeFormationResourceArn": {
          "Description": "Registered S3 resource ARN",
          "Value": {
            "Fn::GetAtt": "LakeFormationResource.ResourceArn"
          }
        },
        "GlueDatabaseName": {
          "Description": "Name of the Glue database",
          "Value": {
            "Ref": "GlueDatabase"
          }
        }
      },
      "aws_resources": [
        "AWS::LakeFormation::DataLakeSettings",
        "AWS::LakeFormation::Resource",
        "AWS::Glue::Database"
      ],
      "environment_aware": true,
      "security_features": [
        "iam_roles"
      ],
      "estimated_complexity": "medium"
    },
    "security": {
      "file_path": "/home/dee/workspace/AI/shieldcraft-ai/proton/security-service-template.yaml",
      "description": "ShieldCraft AI Proton Security Service Template",
      "parameters": {
        "LogGroupName": {
          "Type": "String",
          "Description": "Name of the CloudWatch log group"
        },
        "AlarmName": {
          "Type": "String",
          "Description": "Name of the CloudWatch alarm"
        },
        "AlarmThreshold": {
          "Type": "Number",
          "Description": "Threshold for triggering the alarm",
          "Default": 1
        },
        "GuardDutyEnable": {
          "Type": "String",
          "AllowedValues": [
            true,
            false
          ],
          "Default": true,
          "Description": "Enable GuardDuty detector"
        },
        "EnvironmentName": {
          "Type": "String",
          "Description": "Name of the Proton environment"
        }
      },
      "resources": {
        "CloudWatchLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": {
              "Ref": "LogGroupName"
            },
            "Tags": [
              {
                "Key": "Environment",
                "Value": {
                  "Ref": "EnvironmentName"
                }
              }
            ]
          }
        },
        "CloudWatchAlarm": {
          "Type": "AWS::CloudWatch::Alarm",
          "Properties": {
            "AlarmName": {
              "Ref": "AlarmName"
            },
            "MetricName": "IncomingLogEvents",
            "Namespace": "AWS/Logs",
            "Statistic": "Sum",
            "Period": 60,
            "EvaluationPeriods": 1,
            "Threshold": {
              "Ref": "AlarmThreshold"
            },
            "ComparisonOperator": "GreaterThanOrEqualToThreshold",
            "AlarmActions": [],
            "Dimensions": [
              {
                "Name": "LogGroupName",
                "Value": {
                  "Ref": "LogGroupName"
                }
              }
            ],
            "Tags": [
              {
                "Key": "Environment",
                "Value": {
                  "Ref": "EnvironmentName"
                }
              }
            ]
          }
        },
        "GuardDutyDetector": {
          "Type": "AWS::GuardDuty::Detector",
          "Condition": "EnableGuardDuty",
          "Properties": {
            "Enable": true
          }
        }
      },
      "outputs": {
        "LogGroupName": {
          "Description": "Name of the CloudWatch log group",
          "Value": {
            "Ref": "CloudWatchLogGroup"
          }
        },
        "AlarmName": {
          "Description": "Name of the CloudWatch alarm",
          "Value": {
            "Ref": "CloudWatchAlarm"
          }
        },
        "GuardDutyDetectorId": {
          "Description": "GuardDuty detector ID",
          "Value": {
            "Ref": "GuardDutyDetector"
          }
        }
      },
      "aws_resources": [
        "AWS::Logs::LogGroup",
        "AWS::CloudWatch::Alarm",
        "AWS::GuardDuty::Detector"
      ],
      "environment_aware": true,
      "security_features": [
        "security_groups"
      ],
      "estimated_complexity": "low"
    },
    "opensearch": {
      "file_path": "/home/dee/workspace/AI/shieldcraft-ai/proton/opensearch-service-template.yaml",
      "description": "ShieldCraft AI Proton OpenSearch Service Template",
      "parameters": {
        "AppName": {
          "Type": "String",
          "Description": "Logical application name (e.g., ShieldCraftAI)"
        },
        "Domain": {
          "Type": "String",
          "Description": "Functional domain (e.g., analytics_search)"
        },
        "DomainName": {
          "Type": "String",
          "Description": "Name of the OpenSearch domain"
        },
        "InstanceType": {
          "Type": "String",
          "Description": "EC2 instance type for OpenSearch nodes",
          "Default": "t3.small.search"
        },
        "InstanceCount": {
          "Type": "Number",
          "Description": "Number of OpenSearch nodes",
          "Default": 2
        },
        "ExistingSecretArn": {
          "Type": "String",
          "Description": "Optional ARN of an existing admin credential secret for the domain"
        },
        "EnvironmentName": {
          "Type": "String",
          "Description": "Name of the Proton environment",
          "AllowedValues": [
            "dev",
            "staging",
            "prod"
          ]
        }
      },
      "resources": {
        "OpenSearchDomain": {
          "Type": "AWS::OpenSearchService::Domain",
          "Properties": {
            "DomainName": {
              "Fn::Sub": "${DomainName}-${EnvironmentName}"
            },
            "EngineVersion": "OpenSearch_2.11",
            "ClusterConfig": {
              "InstanceType": {
                "Ref": "InstanceType"
              },
              "InstanceCount": {
                "Ref": "InstanceCount"
              }
            },
            "EBSOptions": {
              "EBSEnabled": true,
              "VolumeSize": 20,
              "VolumeType": "gp3"
            },
            "NodeToNodeEncryptionOptions": {
              "Enabled": true
            },
            "EncryptionAtRestOptions": {
              "Enabled": true
            },
            "Tags": [
              {
                "Key": "Environment",
                "Value": "EnvironmentName"
              },
              {
                "Key": "Project",
                "Value": "shieldcraft-ai"
              },
              {
                "Key": "App",
                "Value": {
                  "Ref": "AppName"
                }
              },
              {
                "Key": "Domain",
                "Value": {
                  "Ref": "Domain"
                }
              },
              {
                "Key": "Env",
                "Value": {
                  "Ref": "EnvironmentName"
                }
              }
            ]
          }
        }
      },
      "outputs": {
        "OpenSearchDomainName": {
          "Description": "Name of the OpenSearch domain",
          "Value": "OpenSearchDomain"
        },
        "DomainAdminSecretArn": {
          "Description": "Existing admin secret ARN for the domain (if provided)",
          "Value": "ExistingSecretArn"
        }
      },
      "aws_resources": [
        "AWS::OpenSearchService::Domain"
      ],
      "environment_aware": true,
      "security_features": [
        "encryption",
        "secrets_management"
      ],
      "estimated_complexity": "medium"
    },
    "airbyte": {
      "file_path": "/home/dee/workspace/AI/shieldcraft-ai/proton/airbyte-service-template.yaml",
      "description": "ShieldCraft AI Proton Airbyte Service Template",
      "parameters": {
        "AppName": {
          "Type": "String",
          "Description": "Logical application name (e.g., ShieldCraftAI)"
        },
        "Domain": {
          "Type": "String",
          "Description": "Functional domain (e.g., data, ingestion)"
        },
        "ConnectorName": {
          "Type": "String",
          "Description": "Name of the Airbyte connector"
        },
        "ECSClusterName": {
          "Type": "String",
          "Description": "Name of the ECS cluster for Airbyte"
        },
        "EnvironmentName": {
          "Type": "String",
          "Description": "Name of the Proton environment",
          "AllowedValues": [
            "dev",
            "staging",
            "prod"
          ]
        },
        "ExistingSecretArn": {
          "Type": "String",
          "Default": "",
          "Description": "Optional ARN of an existing Secrets Manager secret for the connector (no new secret will be created)"
        }
      },
      "resources": {
        "AirbyteECSService": {
          "Type": "AWS::ECS::Service",
          "Properties": {
            "Cluster": {
              "Ref": "ECSClusterName"
            },
            "ServiceName": {
              "Fn::Sub": "${ConnectorName}-${EnvironmentName}"
            },
            "LaunchType": "FARGATE",
            "Tags": [
              {
                "Key": "Environment",
                "Value": "EnvironmentName"
              },
              {
                "Key": "Project",
                "Value": "shieldcraft-ai"
              },
              {
                "Key": "App",
                "Value": {
                  "Ref": "AppName"
                }
              },
              {
                "Key": "Domain",
                "Value": {
                  "Ref": "Domain"
                }
              },
              {
                "Key": "Env",
                "Value": {
                  "Ref": "EnvironmentName"
                }
              }
            ]
          }
        }
      },
      "outputs": {
        "AirbyteServiceName": {
          "Description": "Name of the Airbyte ECS service",
          "Value": "AirbyteECSService"
        },
        "ConnectorSecretArn": {
          "Description": "ARN of the existing connector secret (if provided)",
          "Value": {
            "Fn::If": [
              "HasExistingSecret",
              {
                "Ref": "ExistingSecretArn"
              },
              ""
            ]
          }
        }
      },
      "aws_resources": [
        "AWS::ECS::Service"
      ],
      "environment_aware": true,
      "security_features": [
        "secrets_management"
      ],
      "estimated_complexity": "medium"
    },
    "lambda": {
      "file_path": "/home/dee/workspace/AI/shieldcraft-ai/proton/lambda-service-template.yaml",
      "description": "ShieldCraft AI Proton Lambda Service Template",
      "parameters": {
        "AppName": {
          "Type": "String",
          "Description": "Application name for tagging"
        },
        "Domain": {
          "Type": "String",
          "Description": "Business domain for tagging"
        },
        "EnvironmentName": {
          "Type": "String",
          "AllowedValues": [
            "dev",
            "staging",
            "prod"
          ],
          "Description": "Deployment environment"
        },
        "FunctionName": {
          "Type": "String",
          "Description": "Name of the Lambda function"
        },
        "Handler": {
          "Type": "String",
          "Default": "index.handler",
          "Description": "Lambda handler"
        },
        "Runtime": {
          "Type": "String",
          "Default": "python3.12",
          "Description": "Lambda runtime"
        },
        "CodeS3Bucket": {
          "Type": "String",
          "Description": "S3 bucket containing Lambda code"
        },
        "CodeS3Key": {
          "Type": "String",
          "Description": "S3 key for Lambda code zip"
        },
        "RoleArn": {
          "Type": "String",
          "Description": "IAM role ARN for Lambda execution"
        },
        "VpcId": {
          "Type": "String",
          "Description": "VPC ID for Lambda networking"
        },
        "SubnetIds": {
          "Type": "List<String>",
          "Description": "Subnet IDs for Lambda networking"
        },
        "SecurityGroupIds": {
          "Type": "List<String>",
          "Description": "Security group IDs for Lambda networking"
        }
      },
      "resources": {
        "LambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "FunctionName": {
              "Fn::Sub": "${FunctionName}-${EnvironmentName}"
            },
            "Handler": {
              "Ref": "Handler"
            },
            "Runtime": {
              "Ref": "Runtime"
            },
            "Code": {
              "S3Bucket": {
                "Ref": "CodeS3Bucket"
              },
              "S3Key": {
                "Ref": "CodeS3Key"
              }
            },
            "Role": {
              "Ref": "RoleArn"
            },
            "VpcConfig": {
              "SubnetIds": {
                "Ref": "SubnetIds"
              },
              "SecurityGroupIds": {
                "Ref": "SecurityGroupIds"
              }
            },
            "Timeout": 900,
            "MemorySize": 2048,
            "Tags": [
              {
                "Key": "Project",
                "Value": "ShieldCraftAI"
              },
              {
                "Key": "App",
                "Value": {
                  "Ref": "AppName"
                }
              },
              {
                "Key": "Domain",
                "Value": {
                  "Ref": "Domain"
                }
              },
              {
                "Key": "Env",
                "Value": {
                  "Ref": "EnvironmentName"
                }
              },
              {
                "Key": "Environment",
                "Value": "EnvironmentName"
              }
            ],
            "Environment": {
              "Variables": {
                "ENVIRONMENT": {
                  "Ref": "EnvironmentName"
                }
              }
            }
          }
        }
      },
      "outputs": {
        "LambdaFunctionArn": {
          "Description": "ARN of the deployed Lambda function",
          "Value": {
            "Fn::GetAtt": "LambdaFunction.Arn"
          }
        }
      },
      "aws_resources": [
        "AWS::Lambda::Function"
      ],
      "environment_aware": true,
      "security_features": [
        "iam_roles",
        "vpc_networking",
        "security_groups"
      ],
      "estimated_complexity": "medium"
    },
    "networking": {
      "file_path": "/home/dee/workspace/AI/shieldcraft-ai/proton/networking-environment-template.yaml",
      "description": "ShieldCraft AI Proton Networking Environment Template",
      "parameters": {
        "VpcCidr": {
          "Type": "String",
          "Default": "10.0.0.0/16",
          "Description": "CIDR block for the VPC"
        },
        "PublicSubnet1Cidr": {
          "Type": "String",
          "Default": "10.0.1.0/24",
          "Description": "CIDR block for public subnet 1"
        },
        "PrivateSubnet1Cidr": {
          "Type": "String",
          "Default": "10.0.2.0/24",
          "Description": "CIDR block for private subnet 1"
        },
        "EnvironmentName": {
          "Type": "String",
          "Description": "Name of the Proton environment"
        }
      },
      "resources": {
        "VPC": {
          "Type": "AWS::EC2::VPC",
          "Properties": {
            "CidrBlock": {
              "Ref": "VpcCidr"
            },
            "EnableDnsSupport": true,
            "EnableDnsHostnames": true,
            "Tags": [
              {
                "Key": "Name",
                "Value": {
                  "Ref": "EnvironmentName"
                }
              }
            ]
          }
        },
        "PublicSubnet1": {
          "Type": "AWS::EC2::Subnet",
          "Properties": {
            "VpcId": {
              "Ref": "VPC"
            },
            "CidrBlock": {
              "Ref": "PublicSubnet1Cidr"
            },
            "MapPublicIpOnLaunch": true,
            "AvailabilityZone": {
              "Fn::Select": [
                0,
                {
                  "Fn::GetAZs": ""
                }
              ]
            },
            "Tags": [
              {
                "Key": "Name",
                "Value": {
                  "Fn::Sub": "${EnvironmentName}-public-1"
                }
              }
            ]
          }
        },
        "PrivateSubnet1": {
          "Type": "AWS::EC2::Subnet",
          "Properties": {
            "VpcId": {
              "Ref": "VPC"
            },
            "CidrBlock": {
              "Ref": "PrivateSubnet1Cidr"
            },
            "MapPublicIpOnLaunch": false,
            "AvailabilityZone": {
              "Fn::Select": [
                0,
                {
                  "Fn::GetAZs": ""
                }
              ]
            },
            "Tags": [
              {
                "Key": "Name",
                "Value": {
                  "Fn::Sub": "${EnvironmentName}-private-1"
                }
              }
            ]
          }
        }
      },
      "outputs": {
        "VpcId": {
          "Description": "VPC ID",
          "Value": {
            "Ref": "VPC"
          }
        },
        "PublicSubnet1Id": {
          "Description": "Public Subnet 1 ID",
          "Value": {
            "Ref": "PublicSubnet1"
          }
        },
        "PrivateSubnet1Id": {
          "Description": "Private Subnet 1 ID",
          "Value": {
            "Ref": "PrivateSubnet1"
          }
        }
      },
      "aws_resources": [
        "AWS::EC2::VPC",
        "AWS::EC2::Subnet",
        "AWS::EC2::Subnet"
      ],
      "environment_aware": true,
      "security_features": [
        "vpc_networking"
      ],
      "estimated_complexity": "low"
    },
    "stepfunctions": {
      "file_path": "/home/dee/workspace/AI/shieldcraft-ai/proton/stepfunctions-service-template.yaml",
      "description": "ShieldCraft AI Proton Step Functions Service Template",
      "parameters": {
        "AppName": {
          "Type": "String",
          "Description": "Application name for tagging"
        },
        "Domain": {
          "Type": "String",
          "Description": "Business domain for tagging"
        },
        "StateMachineName": {
          "Type": "String",
          "Description": "Name of the Step Functions state machine"
        },
        "DefinitionString": {
          "Type": "String",
          "Description": "JSON definition of the state machine"
        },
        "RoleArn": {
          "Type": "String",
          "Description": "ARN of the IAM role for Step Functions"
        },
        "EnvironmentName": {
          "Type": "String",
          "AllowedValues": [
            "dev",
            "staging",
            "prod"
          ],
          "Description": "Name of the Proton environment"
        }
      },
      "resources": {
        "StateMachine": {
          "Type": "AWS::StepFunctions::StateMachine",
          "Properties": {
            "StateMachineName": {
              "Fn::Sub": "${StateMachineName}-${EnvironmentName}"
            },
            "DefinitionString": {
              "Ref": "DefinitionString"
            },
            "RoleArn": {
              "Ref": "RoleArn"
            },
            "Tags": [
              {
                "Key": "Project",
                "Value": "ShieldCraftAI"
              },
              {
                "Key": "App",
                "Value": {
                  "Ref": "AppName"
                }
              },
              {
                "Key": "Domain",
                "Value": {
                  "Ref": "Domain"
                }
              },
              {
                "Key": "Env",
                "Value": {
                  "Ref": "EnvironmentName"
                }
              },
              {
                "Key": "Environment",
                "Value": "EnvironmentName"
              }
            ]
          }
        }
      },
      "outputs": {
        "StateMachineName": {
          "Description": "Name of the Step Functions state machine",
          "Value": {
            "Ref": "StateMachine"
          }
        },
        "RoleArn": {
          "Description": "ARN of the IAM role for Step Functions",
          "Value": {
            "Ref": "RoleArn"
          }
        }
      },
      "aws_resources": [
        "AWS::StepFunctions::StateMachine"
      ],
      "environment_aware": true,
      "security_features": [
        "iam_roles"
      ],
      "estimated_complexity": "medium"
    },
    "iam": {
      "file_path": "/home/dee/workspace/AI/shieldcraft-ai/proton/iam-service-template.yaml",
      "description": "ShieldCraft AI Proton IAM Service Template",
      "parameters": {
        "AppName": {
          "Type": "String",
          "Description": "Application name for tagging"
        },
        "Domain": {
          "Type": "String",
          "Description": "Business domain for tagging"
        },
        "RoleName": {
          "Type": "String",
          "Description": "Name of the IAM role"
        },
        "PolicyName": {
          "Type": "String",
          "Description": "Name of the IAM policy"
        },
        "ServicePrincipal": {
          "Type": "String",
          "Description": "AWS service principal for role assumption (e.g., lambda.amazonaws.com)"
        },
        "PolicyDocument": {
          "Type": "Json",
          "Description": "IAM policy document (JSON)"
        },
        "EnvironmentName": {
          "Type": "String",
          "AllowedValues": [
            "dev",
            "staging",
            "prod"
          ],
          "Description": "Name of the Proton environment"
        }
      },
      "resources": {
        "IAMRole": {
          "Type": "AWS::IAM::Role",
          "Properties": {
            "RoleName": {
              "Ref": "RoleName"
            },
            "AssumeRolePolicyDocument": "{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Effect\": \"Allow\",\n      \"Principal\": {\"Service\": \"${ServicePrincipal}\"},\n      \"Action\": \"sts:AssumeRole\"\n    }\n  ]\n}\n",
            "Policies": [
              {
                "PolicyName": {
                  "Ref": "PolicyName"
                },
                "PolicyDocument": {
                  "Ref": "PolicyDocument"
                }
              }
            ],
            "Tags": [
              {
                "Key": "Project",
                "Value": "ShieldCraftAI"
              },
              {
                "Key": "App",
                "Value": {
                  "Ref": "AppName"
                }
              },
              {
                "Key": "Domain",
                "Value": {
                  "Ref": "Domain"
                }
              },
              {
                "Key": "Env",
                "Value": {
                  "Ref": "EnvironmentName"
                }
              },
              {
                "Key": "Environment",
                "Value": "EnvironmentName"
              }
            ]
          }
        },
        "IAMPolicy": {
          "Type": "AWS::IAM::Policy",
          "Properties": {
            "PolicyName": {
              "Ref": "PolicyName"
            },
            "PolicyDocument": {
              "Ref": "PolicyDocument"
            },
            "Roles": [
              "IAMRole"
            ],
            "Tags": [
              {
                "Key": "Project",
                "Value": "ShieldCraftAI"
              },
              {
                "Key": "App",
                "Value": {
                  "Ref": "AppName"
                }
              },
              {
                "Key": "Domain",
                "Value": {
                  "Ref": "Domain"
                }
              },
              {
                "Key": "Env",
                "Value": {
                  "Ref": "EnvironmentName"
                }
              },
              {
                "Key": "Environment",
                "Value": "EnvironmentName"
              }
            ]
          }
        }
      },
      "outputs": {
        "IAMRoleName": {
          "Description": "Name of the IAM role",
          "Value": {
            "Ref": "IAMRole"
          }
        },
        "IAMRoleArn": {
          "Description": "ARN of the IAM role",
          "Value": {
            "Fn::GetAtt": "IAMRole.Arn"
          }
        },
        "IAMPolicyName": {
          "Description": "Name of the IAM policy",
          "Value": {
            "Ref": "IAMPolicy"
          }
        },
        "IAMPolicyArn": {
          "Description": "ARN of the IAM policy",
          "Value": {
            "Fn::GetAtt": "IAMPolicy.Arn"
          }
        }
      },
      "aws_resources": [
        "AWS::IAM::Role",
        "AWS::IAM::Policy"
      ],
      "environment_aware": true,
      "security_features": [
        "iam_roles",
        "iam_policies"
      ],
      "estimated_complexity": "medium"
    },
    "s3": {
      "file_path": "/home/dee/workspace/AI/shieldcraft-ai/proton/s3-service-template.yaml",
      "description": "ShieldCraft AI Proton S3 Service Template",
      "parameters": {
        "AppName": {
          "Type": "String",
          "Description": "Application name for tagging"
        },
        "Domain": {
          "Type": "String",
          "Description": "Business domain for tagging"
        },
        "BucketName": {
          "Type": "String",
          "Description": "Name of the S3 bucket"
        },
        "EnableVersioning": {
          "Type": "String",
          "AllowedValues": [
            true,
            false
          ],
          "Default": true,
          "Description": "Enable versioning on the bucket"
        },
        "EnableEncryption": {
          "Type": "String",
          "AllowedValues": [
            true,
            false
          ],
          "Default": true,
          "Description": "Enable server-side encryption"
        },
        "RemovalPolicy": {
          "Type": "String",
          "AllowedValues": [
            "RETAIN",
            "DESTROY"
          ],
          "Default": "RETAIN",
          "Description": "S3 bucket removal policy"
        },
        "EnvironmentName": {
          "Type": "String",
          "AllowedValues": [
            "dev",
            "staging",
            "prod"
          ],
          "Description": "Name of the Proton environment"
        }
      },
      "resources": {
        "S3Bucket": {
          "Type": "AWS::S3::Bucket",
          "Properties": {
            "BucketName": "BucketName",
            "VersioningConfiguration": {
              "Status": {
                "Fn::If": [
                  "EnableVersioningTrue",
                  "Enabled",
                  "Suspended"
                ]
              }
            },
            "BucketEncryption": {
              "Fn::If": [
                "EnableEncryptionTrue",
                {
                  "ServerSideEncryptionConfiguration": [
                    {
                      "ServerSideEncryptionByDefault": {
                        "SSEAlgorithm": "AES256"
                      }
                    }
                  ]
                },
                {
                  "Ref": "AWS::NoValue"
                }
              ]
            },
            "Tags": [
              {
                "Key": "Project",
                "Value": "ShieldCraftAI"
              },
              {
                "Key": "App",
                "Value": {
                  "Ref": "AppName"
                }
              },
              {
                "Key": "Domain",
                "Value": {
                  "Ref": "Domain"
                }
              },
              {
                "Key": "Env",
                "Value": {
                  "Ref": "EnvironmentName"
                }
              },
              {
                "Key": "Environment",
                "Value": "EnvironmentName"
              }
            ]
          }
        }
      },
      "outputs": {
        "S3BucketName": {
          "Description": "Name of the S3 bucket",
          "Value": "S3Bucket"
        },
        "S3BucketArn": {
          "Description": "ARN of the S3 bucket",
          "Value": "S3Bucket.Arn"
        }
      },
      "aws_resources": [
        "AWS::S3::Bucket"
      ],
      "environment_aware": true,
      "security_features": [
        "encryption",
        "iam_policies"
      ],
      "estimated_complexity": "medium"
    },
    "attack_simulation": {
      "file_path": "/home/dee/workspace/AI/shieldcraft-ai/proton/attack_simulation-service-template.yaml",
      "description": "ShieldCraft AI Proton Attack Simulation Service Template",
      "parameters": {
        "FunctionName": {
          "Type": "String",
          "Description": "Name of the Lambda function"
        },
        "AlarmName": {
          "Type": "String",
          "Description": "Name of the CloudWatch alarm"
        },
        "SecretArn": {
          "Type": "String",
          "Description": "ARN of the imported secret"
        },
        "EnvironmentName": {
          "Type": "String",
          "Description": "Name of the Proton environment"
        }
      },
      "resources": {
        "AttackSimulationLambda": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "FunctionName": {
              "Ref": "FunctionName"
            },
            "Handler": "index.handler",
            "Runtime": "python3.12",
            "Role": {
              "Ref": "SecretArn"
            },
            "Tags": [
              {
                "Key": "Environment",
                "Value": {
                  "Ref": "EnvironmentName"
                }
              }
            ]
          }
        },
        "AttackSimulationAlarm": {
          "Type": "AWS::CloudWatch::Alarm",
          "Properties": {
            "AlarmName": {
              "Ref": "AlarmName"
            },
            "MetricName": "Invocations",
            "Namespace": "AWS/Lambda",
            "Statistic": "Sum",
            "Period": 60,
            "EvaluationPeriods": 1,
            "Threshold": 1,
            "ComparisonOperator": "GreaterThanOrEqualToThreshold",
            "AlarmActions": [],
            "Dimensions": [
              {
                "Name": "FunctionName",
                "Value": {
                  "Ref": "FunctionName"
                }
              }
            ],
            "Tags": [
              {
                "Key": "Environment",
                "Value": {
                  "Ref": "EnvironmentName"
                }
              }
            ]
          }
        }
      },
      "outputs": {
        "LambdaFunctionName": {
          "Description": "Name of the attack simulation Lambda function",
          "Value": {
            "Ref": "AttackSimulationLambda"
          }
        },
        "AlarmName": {
          "Description": "Name of the CloudWatch alarm",
          "Value": {
            "Ref": "AttackSimulationAlarm"
          }
        },
        "SecretArn": {
          "Description": "ARN of the imported secret",
          "Value": {
            "Ref": "SecretArn"
          }
        }
      },
      "aws_resources": [
        "AWS::Lambda::Function",
        "AWS::CloudWatch::Alarm"
      ],
      "environment_aware": true,
      "security_features": [
        "secrets_management"
      ],
      "estimated_complexity": "low"
    },
    "budget": {
      "file_path": "/home/dee/workspace/AI/shieldcraft-ai/proton/budget-service-template.yaml",
      "description": "ShieldCraft AI Proton Budget Service Template",
      "parameters": {
        "BudgetName": {
          "Type": "String",
          "Description": "Name of the AWS Budget"
        },
        "BudgetLimit": {
          "Type": "Number",
          "Description": "Monthly budget limit (USD)"
        },
        "SNSAlertTopicArn": {
          "Type": "String",
          "Description": "ARN of the SNS topic for alerts"
        },
        "VaultSecretArn": {
          "Type": "String",
          "Description": "ARN of the imported vault secret"
        },
        "EnvironmentName": {
          "Type": "String",
          "Description": "Name of the Proton environment"
        }
      },
      "resources": {
        "Budget": {
          "Type": "AWS::Budgets::Budget",
          "Properties": {
            "Budget": {
              "BudgetName": {
                "Ref": "BudgetName"
              },
              "BudgetLimit": {
                "Amount": {
                  "Ref": "BudgetLimit"
                },
                "Unit": "USD"
              },
              "TimeUnit": "MONTHLY",
              "BudgetType": "COST"
            },
            "NotificationsWithSubscribers": [
              {
                "Notification": {
                  "NotificationType": "ACTUAL",
                  "ComparisonOperator": "GREATER_THAN",
                  "Threshold": 100,
                  "ThresholdType": "PERCENTAGE",
                  "NotificationState": "ACTIVE"
                },
                "Subscribers": [
                  {
                    "SubscriptionType": "SNS",
                    "Address": {
                      "Ref": "SNSAlertTopicArn"
                    }
                  }
                ]
              }
            ]
          }
        },
        "VaultSecret": {
          "Type": "AWS::SecretsManager::Secret",
          "Properties": {
            "Name": {
              "Ref": "BudgetName"
            },
            "Description": "Budget alert secret",
            "SecretString": {
              "Ref": "VaultSecretArn"
            },
            "Tags": [
              {
                "Key": "Environment",
                "Value": {
                  "Ref": "EnvironmentName"
                }
              }
            ]
          }
        }
      },
      "outputs": {
        "BudgetName": {
          "Description": "Name of the AWS Budget",
          "Value": {
            "Ref": "Budget"
          }
        },
        "SNSAlertTopicArn": {
          "Description": "ARN of the SNS topic for alerts",
          "Value": {
            "Ref": "SNSAlertTopicArn"
          }
        },
        "VaultSecretArn": {
          "Description": "ARN of the imported vault secret",
          "Value": {
            "Ref": "VaultSecret"
          }
        }
      },
      "aws_resources": [
        "AWS::Budgets::Budget",
        "AWS::SecretsManager::Secret"
      ],
      "environment_aware": true,
      "security_features": [
        "secrets_management"
      ],
      "estimated_complexity": "low"
    },
    "controltower": {
      "file_path": "/home/dee/workspace/AI/shieldcraft-ai/proton/controltower-service-template.yaml",
      "description": "ShieldCraft AI Proton Control Tower Service Template",
      "parameters": {
        "LandingZoneName": {
          "Type": "String",
          "Description": "Name of the Control Tower landing zone"
        },
        "OrganizationUnitName": {
          "Type": "String",
          "Description": "Name of the organizational unit"
        },
        "GuardrailName": {
          "Type": "String",
          "Description": "Name of the Control Tower guardrail"
        },
        "EnvironmentName": {
          "Type": "String",
          "Description": "Name of the Proton environment"
        }
      },
      "resources": {
        "ControlTowerLandingZone": {
          "Type": "AWS::ControlTower::LandingZone",
          "Properties": {
            "Name": {
              "Ref": "LandingZoneName"
            },
            "Description": "ShieldCraft AI landing zone",
            "OrganizationalUnits": [
              {
                "Name": {
                  "Ref": "OrganizationUnitName"
                }
              }
            ],
            "Tags": [
              {
                "Key": "Environment",
                "Value": {
                  "Ref": "EnvironmentName"
                }
              }
            ]
          }
        },
        "ControlTowerGuardrail": {
          "Type": "AWS::ControlTower::Guardrail",
          "Properties": {
            "Name": {
              "Ref": "GuardrailName"
            },
            "LandingZone": {
              "Ref": "ControlTowerLandingZone"
            },
            "Tags": [
              {
                "Key": "Environment",
                "Value": {
                  "Ref": "EnvironmentName"
                }
              }
            ]
          }
        }
      },
      "outputs": {
        "LandingZoneName": {
          "Description": "Name of the Control Tower landing zone",
          "Value": {
            "Ref": "ControlTowerLandingZone"
          }
        },
        "GuardrailName": {
          "Description": "Name of the Control Tower guardrail",
          "Value": {
            "Ref": "ControlTowerGuardrail"
          }
        }
      },
      "aws_resources": [
        "AWS::ControlTower::LandingZone",
        "AWS::ControlTower::Guardrail"
      ],
      "environment_aware": true,
      "security_features": [],
      "estimated_complexity": "low"
    },
    "secrets_manager": {
      "file_path": "/home/dee/workspace/AI/shieldcraft-ai/proton/secrets_manager-service-template.yaml",
      "description": "ShieldCraft AI Proton Secrets Manager Service Template",
      "parameters": {
        "SecretName": {
          "Type": "String",
          "Description": "Name of the secret"
        },
        "SecretString": {
          "Type": "String",
          "Description": "Secret value (JSON or string)"
        },
        "ResourcePolicy": {
          "Type": "Json",
          "Description": "Resource policy for the secret"
        },
        "EnvironmentName": {
          "Type": "String",
          "Description": "Name of the Proton environment"
        }
      },
      "resources": {
        "SecretsManagerSecret": {
          "Type": "AWS::SecretsManager::Secret",
          "Properties": {
            "Name": {
              "Ref": "SecretName"
            },
            "Description": "ShieldCraft AI managed secret",
            "SecretString": {
              "Ref": "SecretString"
            },
            "Tags": [
              {
                "Key": "Environment",
                "Value": {
                  "Ref": "EnvironmentName"
                }
              }
            ],
            "ResourcePolicy": {
              "Ref": "ResourcePolicy"
            }
          }
        }
      },
      "outputs": {
        "SecretName": {
          "Description": "Name of the secret",
          "Value": {
            "Ref": "SecretsManagerSecret"
          }
        },
        "SecretArn": {
          "Description": "ARN of the secret",
          "Value": {
            "Fn::GetAtt": "SecretsManagerSecret.Arn"
          }
        }
      },
      "aws_resources": [
        "AWS::SecretsManager::Secret"
      ],
      "environment_aware": true,
      "security_features": [
        "secrets_management",
        "iam_policies"
      ],
      "estimated_complexity": "low"
    },
    "dataquality": {
      "file_path": "/home/dee/workspace/AI/shieldcraft-ai/proton/dataquality-service-template.yaml",
      "description": "ShieldCraft AI Proton Data Quality Service Template",
      "parameters": {
        "QualityJobName": {
          "Type": "String",
          "Description": "Name of the data quality job"
        },
        "VaultSecretArn": {
          "Type": "String",
          "Description": "ARN of the imported vault secret"
        },
        "EnvironmentName": {
          "Type": "String",
          "Description": "Name of the Proton environment"
        }
      },
      "resources": {
        "DataQualityJob": {
          "Type": "AWS::Batch::JobDefinition",
          "Properties": {
            "JobDefinitionName": {
              "Ref": "QualityJobName"
            },
            "Type": "container",
            "ContainerProperties": {
              "Image": "public.ecr.aws/dataquality/job:latest",
              "Vcpus": 1,
              "Memory": 2048,
              "Command": [
                "run-quality-checks"
              ]
            },
            "Tags": [
              {
                "Key": "Environment",
                "Value": {
                  "Ref": "EnvironmentName"
                }
              }
            ]
          }
        },
        "VaultSecret": {
          "Type": "AWS::SecretsManager::Secret",
          "Properties": {
            "Name": {
              "Ref": "QualityJobName"
            },
            "Description": "Data quality job secret",
            "SecretString": {
              "Ref": "VaultSecretArn"
            },
            "Tags": [
              {
                "Key": "Environment",
                "Value": {
                  "Ref": "EnvironmentName"
                }
              }
            ]
          }
        }
      },
      "outputs": {
        "DataQualityJobName": {
          "Description": "Name of the data quality job",
          "Value": {
            "Ref": "DataQualityJob"
          }
        },
        "VaultSecretArn": {
          "Description": "ARN of the imported vault secret",
          "Value": {
            "Ref": "VaultSecret"
          }
        }
      },
      "aws_resources": [
        "AWS::Batch::JobDefinition",
        "AWS::SecretsManager::Secret"
      ],
      "environment_aware": true,
      "security_features": [
        "secrets_management"
      ],
      "estimated_complexity": "low"
    },
    "glue": {
      "file_path": "/home/dee/workspace/AI/shieldcraft-ai/proton/glue-service-template.yaml",
      "description": "ShieldCraft AI Proton Glue Service Template",
      "parameters": {
        "AppName": {
          "Type": "String",
          "Description": "Logical application name (e.g., ShieldCraftAI)"
        },
        "Domain": {
          "Type": "String",
          "Description": "Functional domain (e.g., data)"
        },
        "DatabaseName": {
          "Type": "String",
          "Description": "Name of the Glue database"
        },
        "CrawlerName": {
          "Type": "String",
          "Description": "Name of the Glue crawler"
        },
        "CrawlerRoleArn": {
          "Type": "String",
          "Description": "ARN of the IAM role for the crawler"
        },
        "TargetPath": {
          "Type": "String",
          "Description": "S3 path to crawl (e.g., s3://bucket/prefix)"
        },
        "EnvironmentName": {
          "Type": "String",
          "Description": "Name of the Proton environment",
          "AllowedValues": [
            "dev",
            "staging",
            "prod"
          ]
        }
      },
      "resources": {
        "GlueDatabase": {
          "Type": "AWS::Glue::Database",
          "Properties": {
            "CatalogId": {
              "Ref": "AWS::AccountId"
            },
            "DatabaseInput": {
              "Name": {
                "Ref": "DatabaseName"
              },
              "Description": "Glue database for ShieldCraft AI"
            },
            "Tags": [
              {
                "Key": "Environment",
                "Value": "EnvironmentName"
              },
              {
                "Key": "Project",
                "Value": "shieldcraft-ai"
              },
              {
                "Key": "App",
                "Value": {
                  "Ref": "AppName"
                }
              },
              {
                "Key": "Domain",
                "Value": {
                  "Ref": "Domain"
                }
              },
              {
                "Key": "Env",
                "Value": {
                  "Ref": "EnvironmentName"
                }
              }
            ]
          }
        },
        "GlueCrawler": {
          "Type": "AWS::Glue::Crawler",
          "Properties": {
            "Name": {
              "Ref": "CrawlerName"
            },
            "Role": {
              "Ref": "CrawlerRoleArn"
            },
            "DatabaseName": {
              "Ref": "DatabaseName"
            },
            "Targets": {
              "S3Targets": [
                {
                  "Path": {
                    "Ref": "TargetPath"
                  }
                }
              ]
            },
            "Tags": [
              {
                "Key": "Environment",
                "Value": "EnvironmentName"
              },
              {
                "Key": "Project",
                "Value": "shieldcraft-ai"
              },
              {
                "Key": "App",
                "Value": {
                  "Ref": "AppName"
                }
              },
              {
                "Key": "Domain",
                "Value": {
                  "Ref": "Domain"
                }
              },
              {
                "Key": "Env",
                "Value": {
                  "Ref": "EnvironmentName"
                }
              }
            ]
          }
        }
      },
      "outputs": {
        "GlueDatabaseName": {
          "Description": "Name of the Glue database",
          "Value": {
            "Ref": "GlueDatabase"
          }
        },
        "GlueCrawlerName": {
          "Description": "Name of the Glue crawler",
          "Value": {
            "Ref": "GlueCrawler"
          }
        }
      },
      "aws_resources": [
        "AWS::Glue::Database",
        "AWS::Glue::Crawler"
      ],
      "environment_aware": true,
      "security_features": [
        "iam_roles"
      ],
      "estimated_complexity": "medium"
    },
    "msk": {
      "file_path": "/home/dee/workspace/AI/shieldcraft-ai/proton/msk-service-template.yaml",
      "description": "ShieldCraft AI Proton MSK Service Template",
      "parameters": {
        "AppName": {
          "Type": "String",
          "Description": "Logical application name (e.g., ShieldCraftAI)"
        },
        "Domain": {
          "Type": "String",
          "Description": "Functional domain (e.g., data, ingestion)"
        },
        "ClusterName": {
          "Type": "String",
          "Description": "Name of the MSK cluster"
        },
        "BrokerNodeGroupInstanceType": {
          "Type": "String",
          "Description": "EC2 instance type for broker nodes",
          "Default": "kafka.m5.large"
        },
        "NumberOfBrokerNodes": {
          "Type": "Number",
          "Description": "Number of broker nodes",
          "Default": 3
        },
        "EnvironmentName": {
          "Type": "String",
          "Description": "Name of the Proton environment",
          "AllowedValues": [
            "dev",
            "staging",
            "prod"
          ]
        },
        "UseManagedKafka": {
          "Type": "String",
          "AllowedValues": [
            "true",
            "false"
          ],
          "Default": "true",
          "Description": "Whether to create an MSK cluster (set to false in dev to use external/custom Kafka)"
        },
        "ExternalBootstrapBrokers": {
          "Type": "String",
          "Default": "",
          "Description": "Optional bootstrap servers when UseManagedKafka=false (dev)"
        },
        "ExistingScramSecretArn": {
          "Type": "String",
          "Default": "",
          "Description": "Optional ARN of existing Secrets Manager secret for SASL/SCRAM credentials (external Kafka)"
        }
      },
      "resources": {
        "MSKCluster": {
          "Type": "AWS::MSK::Cluster",
          "Condition": "UseManagedKafkaTrue",
          "Properties": {
            "ClusterName": {
              "Fn::Sub": "${ClusterName}-${EnvironmentName}"
            },
            "KafkaVersion": "2.8.1",
            "NumberOfBrokerNodes": {
              "Ref": "NumberOfBrokerNodes"
            },
            "BrokerNodeGroupInfo": {
              "InstanceType": {
                "Ref": "BrokerNodeGroupInstanceType"
              },
              "ClientSubnets": [
                "subnet-xxxxxx"
              ],
              "SecurityGroups": [
                "sg-xxxxxx"
              ]
            },
            "EncryptionInfo": {
              "EncryptionInTransit": {
                "ClientBroker": "TLS",
                "InCluster": true
              }
            },
            "Tags": [
              {
                "Key": "Environment",
                "Value": "EnvironmentName"
              },
              {
                "Key": "Project",
                "Value": "shieldcraft-ai"
              },
              {
                "Key": "App",
                "Value": {
                  "Ref": "AppName"
                }
              },
              {
                "Key": "Domain",
                "Value": {
                  "Ref": "Domain"
                }
              },
              {
                "Key": "Env",
                "Value": {
                  "Ref": "EnvironmentName"
                }
              }
            ]
          }
        }
      },
      "outputs": {
        "MSKClusterName": {
          "Description": "Name of the MSK cluster (only when UseManagedKafka=true)",
          "Value": {
            "Fn::If": [
              "UseManagedKafkaTrue",
              {
                "Ref": "MSKCluster"
              },
              ""
            ]
          }
        },
        "MSKClusterArn": {
          "Description": "ARN of the MSK cluster (only when UseManagedKafka=true)",
          "Value": {
            "Fn::If": [
              "UseManagedKafkaTrue",
              {
                "Fn::GetAtt": "MSKCluster.Arn"
              },
              ""
            ]
          }
        },
        "ExternalKafkaBootstrapBrokers": {
          "Description": "Bootstrap brokers for external/custom Kafka when UseManagedKafka=false",
          "Value": {
            "Fn::If": [
              "UseManagedKafkaTrue",
              "",
              {
                "Ref": "ExternalBootstrapBrokers"
              }
            ]
          }
        },
        "ExternalKafkaScramSecretArn": {
          "Description": "Existing secret ARN for external Kafka SASL/SCRAM credentials (optional)",
          "Value": {
            "Ref": "ExistingScramSecretArn"
          }
        }
      },
      "aws_resources": [
        "AWS::MSK::Cluster"
      ],
      "environment_aware": true,
      "security_features": [
        "encryption",
        "secrets_management",
        "security_groups"
      ],
      "estimated_complexity": "medium"
    },
    "compliance": {
      "file_path": "/home/dee/workspace/AI/shieldcraft-ai/proton/compliance-service-template.yaml",
      "description": "ShieldCraft AI Proton Compliance Service Template",
      "parameters": {
        "ReportLambdaName": {
          "Type": "String",
          "Description": "Name of the Lambda function for compliance reports"
        },
        "VaultSecretArn": {
          "Type": "String",
          "Description": "ARN of the imported vault secret"
        },
        "EnvironmentName": {
          "Type": "String",
          "Description": "Name of the Proton environment"
        }
      },
      "resources": {
        "ComplianceReportLambda": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "FunctionName": {
              "Ref": "ReportLambdaName"
            },
            "Handler": "index.handler",
            "Runtime": "python3.12",
            "Role": {
              "Ref": "VaultSecretArn"
            },
            "Tags": [
              {
                "Key": "Environment",
                "Value": {
                  "Ref": "EnvironmentName"
                }
              }
            ]
          }
        },
        "VaultSecret": {
          "Type": "AWS::SecretsManager::Secret",
          "Properties": {
            "Name": {
              "Ref": "ReportLambdaName"
            },
            "Description": "Compliance report secret",
            "SecretString": {
              "Ref": "VaultSecretArn"
            },
            "Tags": [
              {
                "Key": "Environment",
                "Value": {
                  "Ref": "EnvironmentName"
                }
              }
            ]
          }
        }
      },
      "outputs": {
        "ComplianceReportLambdaName": {
          "Description": "Name of the compliance report Lambda function",
          "Value": {
            "Ref": "ComplianceReportLambda"
          }
        },
        "VaultSecretArn": {
          "Description": "ARN of the imported vault secret",
          "Value": {
            "Ref": "VaultSecret"
          }
        }
      },
      "aws_resources": [
        "AWS::Lambda::Function",
        "AWS::SecretsManager::Secret"
      ],
      "environment_aware": true,
      "security_features": [
        "secrets_management"
      ],
      "estimated_complexity": "low"
    }
  },
  "generation_metadata": {
    "timestamp": "2025-10-02T00:00:00Z",
    "version": "1.0.0",
    "total_capabilities": 8,
    "total_services": 14,
    "environments": [
      "dev",
      "staging",
      "prod"
    ]
  }
}
